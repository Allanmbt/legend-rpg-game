{"ast":null,"code":"var _jsxFileName = \"D:\\\\mm-rpg-react\\\\src\\\\contexts\\\\GameContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\n\n// 战场配置\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst battlefields = [{\n  id: 'novice',\n  name: '新手村',\n  levelRange: [1, 10],\n  background: '#e6f7ff',\n  description: '适合1-10级玩家的新手战场'\n}, {\n  id: 'intermediate',\n  name: '进阶森林',\n  levelRange: [11, 20],\n  background: '#e6ffe6',\n  description: '适合11-20级玩家的进阶战场'\n}, {\n  id: 'hell',\n  name: '地狱级难度',\n  levelRange: [21, 30],\n  background: '#ffe6e6',\n  description: '适合21-30级玩家的高难度战场'\n}];\n\n// 装备类型定义\nconst equipmentTypes = {\n  HEAD: {\n    id: 'HEAD',\n    name: '头部',\n    emoji: '🧢',\n    slot: 'head'\n  },\n  BODY: {\n    id: 'BODY',\n    name: '身体',\n    emoji: '👕',\n    slot: 'body'\n  },\n  BELT: {\n    id: 'BELT',\n    name: '腰带',\n    emoji: '🧶',\n    slot: 'belt'\n  },\n  SHOES: {\n    id: 'SHOES',\n    name: '鞋子',\n    emoji: '👞',\n    slot: 'shoes'\n  },\n  WEAPON: {\n    id: 'WEAPON',\n    name: '武器',\n    emoji: '🗡️',\n    slot: 'weapon'\n  },\n  NECKLACE: {\n    id: 'NECKLACE',\n    name: '项链',\n    emoji: '📿',\n    slot: 'necklace'\n  },\n  ACCESSORY: {\n    id: 'ACCESSORY',\n    name: '首饰',\n    emoji: '💍',\n    slot: 'accessory'\n  }\n};\n\n// 装备稀有度定义\nconst rarities = {\n  COMMON: {\n    id: 'COMMON',\n    name: '普通',\n    color: '#a0a0a0',\n    chance: 0.6,\n    multiplier: 1\n  },\n  UNCOMMON: {\n    id: 'UNCOMMON',\n    name: '优秀',\n    color: '#1eff00',\n    chance: 0.3,\n    multiplier: 1.5\n  },\n  RARE: {\n    id: 'RARE',\n    name: '精良',\n    color: '#0070dd',\n    chance: 0.08,\n    multiplier: 2\n  },\n  EPIC: {\n    id: 'EPIC',\n    name: '史诗',\n    color: '#a335ee',\n    chance: 0.02,\n    multiplier: 2.5\n  },\n  LEGENDARY: {\n    id: 'LEGENDARY',\n    name: '传说',\n    color: '#ff8000',\n    chance: 0.004,\n    multiplier: 3\n  }\n};\n\n// 装备属性定义\nconst attributeTypes = {\n  HEALTH: {\n    id: 'HEALTH',\n    name: '生命值',\n    min: 5,\n    max: 20,\n    scaling: 2\n  },\n  ATTACK: {\n    id: 'ATTACK',\n    name: '攻击力',\n    min: 1,\n    max: 5,\n    scaling: 0.5\n  },\n  DEFENSE: {\n    id: 'DEFENSE',\n    name: '防御力',\n    min: 1,\n    max: 3,\n    scaling: 0.3\n  },\n  AGILITY: {\n    id: 'AGILITY',\n    name: '敏捷度',\n    min: 1,\n    max: 3,\n    scaling: 0.3\n  },\n  CRIT_CHANCE: {\n    id: 'CRIT_CHANCE',\n    name: '暴击率',\n    min: 0.01,\n    max: 0.03,\n    scaling: 0.003\n  }\n};\n\n// 按装备类型划分可能的属性 (某些属性只在特定装备上出现)\nconst equipmentAttributes = {\n  HEAD: ['HEALTH', 'DEFENSE'],\n  BODY: ['HEALTH', 'DEFENSE'],\n  BELT: ['HEALTH', 'AGILITY'],\n  SHOES: ['AGILITY', 'DEFENSE'],\n  WEAPON: ['ATTACK', 'CRIT_CHANCE'],\n  NECKLACE: ['HEALTH', 'CRIT_CHANCE'],\n  ACCESSORY: ['ATTACK', 'AGILITY', 'CRIT_CHANCE']\n};\n\n// 随机生成装备\nconst generateEquipment = (playerLevel, dropRateBonus = 0) => {\n  // 装备等级范围\n  const equipLevel = Math.max(1, Math.floor(playerLevel * (0.8 + Math.random() * 0.4)));\n\n  // 随机装备类型\n  const equipTypeKeys = Object.keys(equipmentTypes);\n  const randomType = equipmentTypes[equipTypeKeys[Math.floor(Math.random() * equipTypeKeys.length)]];\n\n  // 随机稀有度 (使用概率权重)\n  let rarityRoll = Math.random() - dropRateBonus; // 掉落率加成提高稀有度概率\n  rarityRoll = Math.max(0, rarityRoll); // 确保不会是负数\n\n  let selectedRarity;\n  if (rarityRoll < rarities.LEGENDARY.chance) {\n    selectedRarity = rarities.LEGENDARY;\n  } else if (rarityRoll < rarities.EPIC.chance + rarities.LEGENDARY.chance) {\n    selectedRarity = rarities.EPIC;\n  } else if (rarityRoll < rarities.RARE.chance + rarities.EPIC.chance + rarities.LEGENDARY.chance) {\n    selectedRarity = rarities.RARE;\n  } else if (rarityRoll < rarities.UNCOMMON.chance + rarities.RARE.chance + rarities.EPIC.chance + rarities.LEGENDARY.chance) {\n    selectedRarity = rarities.UNCOMMON;\n  } else {\n    selectedRarity = rarities.COMMON;\n  }\n\n  // 确定属性数量 (基于稀有度)\n  const attrCount = Math.floor(Math.random() * 2) + 1; // 1-2个属性\n\n  // 随机选择属性\n  const possibleAttributes = equipmentAttributes[randomType.id];\n  const shuffledAttributes = [...possibleAttributes].sort(() => 0.5 - Math.random());\n  const selectedAttributes = shuffledAttributes.slice(0, attrCount);\n\n  // 为每个属性随机生成数值\n  const attributes = {};\n  selectedAttributes.forEach(attrKey => {\n    const attr = attributeTypes[attrKey];\n    // 基础属性值 + 等级缩放 * 稀有度倍率\n    const baseValue = attr.min + Math.random() * (attr.max - attr.min);\n    const levelScaling = attr.scaling * equipLevel;\n    let value = (baseValue + levelScaling) * selectedRarity.multiplier;\n\n    // 对暴击率进行特殊处理，确保不超过合理范围\n    if (attrKey === 'CRIT_CHANCE') {\n      value = Math.min(value, 0.25); // 最高25%暴击率\n      value = Math.round(value * 1000) / 1000; // 保留3位小数\n    } else {\n      value = Math.floor(value); // 其他属性取整\n    }\n    attributes[attrKey] = value;\n  });\n\n  // 生成装备名称\n  const prefixes = ['锋利的', '坚固的', '闪亮的', '破旧的', '神秘的', '古老的', '强化的', '精制的', '魔法的', '传承的'];\n  const randomPrefix = prefixes[Math.floor(Math.random() * prefixes.length)];\n  const name = `${randomPrefix} ${randomType.name}`;\n\n  // 生成唯一ID\n  const id = `equip_${Date.now()}_${Math.floor(Math.random() * 1000)}`;\n  return {\n    id,\n    name,\n    type: randomType.id,\n    emoji: randomType.emoji,\n    slot: randomType.slot,\n    level: equipLevel,\n    rarity: selectedRarity.id,\n    rarityName: selectedRarity.name,\n    rarityColor: selectedRarity.color,\n    attributes\n  };\n};\n\n// 怪物配置（根据等级生成）\nconst generateMonster = (playerLevel, battlefieldId) => {\n  // 根据战场确定怪物等级范围\n  let minLevel = playerLevel - 2;\n  let maxLevel = playerLevel + 2;\n  const battlefield = battlefields.find(bf => bf.id === battlefieldId);\n\n  // 确保怪物等级在战场范围内\n  if (battlefield) {\n    minLevel = Math.max(minLevel, battlefield.levelRange[0]);\n    maxLevel = Math.min(maxLevel, battlefield.levelRange[1]);\n  }\n\n  // 随机确定怪物等级\n  const monsterLevel = Math.floor(Math.random() * (maxLevel - minLevel + 1)) + minLevel;\n\n  // 怪物类型\n  const monsterTypes = [{\n    name: '史莱姆',\n    emoji: '🟢',\n    baseHealth: 50,\n    baseAttack: 5,\n    baseDefense: 2,\n    baseAgility: 1\n  }, {\n    name: '蝙蝠',\n    emoji: '🦇',\n    baseHealth: 40,\n    baseAttack: 7,\n    baseDefense: 1,\n    baseAgility: 5\n  }, {\n    name: '骷髅',\n    emoji: '💀',\n    baseHealth: 60,\n    baseAttack: 6,\n    baseDefense: 3,\n    baseAgility: 2\n  }, {\n    name: '蜘蛛',\n    emoji: '🕷️',\n    baseHealth: 45,\n    baseAttack: 6,\n    baseDefense: 2,\n    baseAgility: 4\n  }, {\n    name: '幽灵',\n    emoji: '👻',\n    baseHealth: 55,\n    baseAttack: 8,\n    baseDefense: 0,\n    baseAgility: 6\n  }, {\n    name: '巨魔',\n    emoji: '👹',\n    baseHealth: 70,\n    baseAttack: 9,\n    baseDefense: 4,\n    baseAgility: 1\n  }, {\n    name: '恶魔',\n    emoji: '😈',\n    baseHealth: 65,\n    baseAttack: 10,\n    baseDefense: 3,\n    baseAgility: 3\n  }];\n\n  // 根据战场难度选择怪物\n  let availableMonsters;\n  if (battlefieldId === 'novice') {\n    availableMonsters = monsterTypes.slice(0, 3); // 简单怪物\n  } else if (battlefieldId === 'intermediate') {\n    availableMonsters = monsterTypes.slice(2, 5); // 中等怪物\n  } else {\n    availableMonsters = monsterTypes.slice(4); // 困难怪物\n  }\n\n  // 随机选择一种怪物\n  const monsterType = availableMonsters[Math.floor(Math.random() * availableMonsters.length)];\n\n  // 基于等级计算怪物属性\n  const levelMultiplier = 1 + (monsterLevel - 1) * 0.1; // 每级提升10%\n\n  return {\n    name: `${monsterLevel}级${monsterType.name}`,\n    emoji: monsterType.emoji,\n    level: monsterLevel,\n    maxHealth: Math.floor(monsterType.baseHealth * levelMultiplier),\n    currentHealth: Math.floor(monsterType.baseHealth * levelMultiplier),\n    attack: Math.floor(monsterType.baseAttack * levelMultiplier),\n    defense: Math.floor(monsterType.baseDefense * levelMultiplier),\n    agility: Math.floor(monsterType.baseAgility * levelMultiplier),\n    critChance: 0.1 + monsterLevel * 0.005,\n    // 基础10%，每级+0.5%\n    critMultiplier: 1.5,\n    // 怪物经验值：基础值 + 等级加成\n    expReward: 10 + monsterLevel * 5,\n    // 掉落装备概率 (20% + 等级加成)\n    dropChance: 0.2 + monsterLevel * 0.01\n  };\n};\n\n// 计算升级所需经验\nconst calculateExpToNextLevel = level => {\n  // 使用指数增长公式: 100 * (level)^1.5\n  return Math.floor(100 * Math.pow(level, 1.5));\n};\n\n// 计算装备提供的属性总和\nconst calculateEquipmentStats = equipment => {\n  const stats = {\n    health: 0,\n    attack: 0,\n    defense: 0,\n    agility: 0,\n    critChance: 0\n  };\n\n  // 遍历所有装备槽位\n  Object.values(equipment).forEach(equip => {\n    if (!equip) return; // 如果槽位没有装备\n\n    // 累加装备属性\n    Object.entries(equip.attributes).forEach(([key, value]) => {\n      switch (key) {\n        case 'HEALTH':\n          stats.health += value;\n          break;\n        case 'ATTACK':\n          stats.attack += value;\n          break;\n        case 'DEFENSE':\n          stats.defense += value;\n          break;\n        case 'AGILITY':\n          stats.agility += value;\n          break;\n        case 'CRIT_CHANCE':\n          stats.critChance += value;\n          break;\n        default:\n          break;\n      }\n    });\n  });\n  return stats;\n};\n\n// 初始状态\n// 初始状态\nconst createInitialState = () => {\n  try {\n    // 尝试从localStorage读取保存的状态\n    const savedState = localStorage.getItem('rpgGameState');\n    if (savedState) {\n      const parsedState = JSON.parse(savedState);\n\n      // 检查并确保所有关键属性都存在，如果不存在则使用默认值\n      // 确保inventory存在\n      if (!parsedState.inventory) {\n        parsedState.inventory = {\n          maxSlots: 20,\n          items: []\n        };\n      }\n\n      // 确保modal存在\n      if (!parsedState.modal) {\n        parsedState.modal = {\n          isOpen: false,\n          type: null,\n          data: null\n        };\n      }\n\n      // 确保equipment存在\n      if (!parsedState.equipment) {\n        parsedState.equipment = {\n          head: null,\n          body: null,\n          belt: null,\n          shoes: null,\n          weapon: null,\n          necklace: null,\n          accessory: null\n        };\n      }\n      return parsedState;\n    }\n  } catch (e) {\n    console.error('Failed to parse saved game state:', e);\n  }\n\n  // 默认初始状态\n  return {\n    // 游戏场景状态: 'select' - 战场选择页面, 'battle' - 战斗页面\n    gameScene: 'select',\n    selectedBattlefield: null,\n    // 角色基础属性\n    player: {\n      name: \"勇者\",\n      level: 1,\n      experience: 0,\n      expToNextLevel: calculateExpToNextLevel(1),\n      maxHealth: 100,\n      currentHealth: 100,\n      attack: 10,\n      defense: 5,\n      agility: 3,\n      // 新增敏捷度属性\n      critChance: 0.1,\n      critMultiplier: 1.5\n    },\n    // 装备系统\n    equipment: {\n      head: null,\n      body: null,\n      belt: null,\n      shoes: null,\n      weapon: null,\n      necklace: null,\n      accessory: null\n    },\n    // 物品栏\n    inventory: {\n      maxSlots: 20,\n      // 物品栏最大格子数\n      items: [] // 物品列表，每个物品包含 {id, count, ...itemData}\n    },\n    // 模态窗口状态\n    modal: {\n      isOpen: false,\n      type: null,\n      // 'character', 'equipment', 'inventory'\n      data: null\n    },\n    // 物品右键菜单状态\n    contextMenu: {\n      isOpen: false,\n      position: {\n        x: 0,\n        y: 0\n      },\n      item: null\n    },\n    monster: null,\n    battleLogs: [],\n    playerAttacking: false,\n    monsterAttacking: false,\n    playerDamaged: false,\n    monsterDamaged: false,\n    gameSpeed: 2000,\n    // 每回合间隔(毫秒)\n    gameRunning: true,\n    battlefields: battlefields\n  };\n};\n\n// Reducer函数来处理状态更新\nfunction gameReducer(state, action) {\n  let newState;\n  switch (action.type) {\n    // 选择战场\n    case 'SELECT_BATTLEFIELD':\n      newState = {\n        ...state,\n        gameScene: 'battle',\n        selectedBattlefield: action.payload,\n        battleLogs: [{\n          id: Date.now(),\n          text: `进入${action.payload.name}战场！`,\n          isCritical: false\n        }],\n        // 生成新怪物\n        monster: generateMonster(state.player.level, action.payload.id)\n      };\n      break;\n\n    // 返回选择页面\n    case 'RETURN_TO_SELECT':\n      newState = {\n        ...state,\n        gameScene: 'select',\n        monster: null,\n        battleLogs: []\n      };\n      break;\n\n    // 打开模态窗口\n    case 'OPEN_MODAL':\n      newState = {\n        ...state,\n        modal: {\n          isOpen: true,\n          type: action.payload.type,\n          data: action.payload.data || null\n        }\n      };\n      break;\n\n    // 关闭模态窗口\n    case 'CLOSE_MODAL':\n      newState = {\n        ...state,\n        modal: {\n          ...state.modal,\n          isOpen: false\n        }\n      };\n      break;\n\n    // 打开右键菜单\n    case 'OPEN_CONTEXT_MENU':\n      newState = {\n        ...state,\n        contextMenu: {\n          isOpen: true,\n          position: action.payload.position,\n          item: action.payload.item\n        }\n      };\n      break;\n\n    // 关闭右键菜单\n    case 'CLOSE_CONTEXT_MENU':\n      newState = {\n        ...state,\n        contextMenu: {\n          ...state.contextMenu,\n          isOpen: false\n        }\n      };\n      break;\n\n    // 装备物品\n    case 'EQUIP_ITEM':\n      {\n        const item = action.payload;\n        const {\n          slot\n        } = item;\n\n        // 检查是否已经有装备在该槽位\n        const existingEquipment = state.equipment[slot];\n        let newInventory = {\n          ...state.inventory\n        };\n\n        // 从物品栏移除要装备的物品\n        newInventory.items = newInventory.items.filter(invItem => {\n          if (invItem.id === item.id) {\n            if (invItem.count > 1) {\n              invItem.count--;\n              return true;\n            }\n            return false;\n          }\n          return true;\n        });\n\n        // 如果槽位已有装备，将其放回物品栏\n        if (existingEquipment) {\n          // 检查物品栏是否已有相同物品\n          const existingInvItem = newInventory.items.find(i => i.id === existingEquipment.id || i.name === existingEquipment.name && i.level === existingEquipment.level);\n          if (existingInvItem) {\n            existingInvItem.count++;\n          } else {\n            // 检查物品栏是否已满\n            if (newInventory.items.length < newInventory.maxSlots) {\n              newInventory.items.push({\n                ...existingEquipment,\n                count: 1\n              });\n            } else {\n              // 如果满了，添加提示\n              newState = {\n                ...state,\n                battleLogs: [{\n                  id: Date.now(),\n                  text: `物品栏已满，无法卸下${existingEquipment.name}！`,\n                  isCritical: true\n                }, ...state.battleLogs.slice(0, 19)]\n              };\n              break;\n            }\n          }\n        }\n\n        // 创建新的装备状态\n        const newEquipment = {\n          ...state.equipment,\n          [slot]: {\n            ...item,\n            count: 1\n          }\n        };\n\n        // 获取新的装备加成\n        const equipStats = calculateEquipmentStats(newEquipment);\n\n        // 更新玩家属性（基础属性+装备加成）\n        const basePlayer = {\n          ...state.player\n        };\n        const updatedPlayer = {\n          ...basePlayer,\n          maxHealth: basePlayer.maxHealth + equipStats.health,\n          currentHealth: Math.min(basePlayer.currentHealth + equipStats.health, basePlayer.maxHealth + equipStats.health),\n          attack: basePlayer.attack + equipStats.attack,\n          defense: basePlayer.defense + equipStats.defense,\n          agility: basePlayer.agility + equipStats.agility,\n          critChance: basePlayer.critChance + equipStats.critChance\n        };\n        newState = {\n          ...state,\n          equipment: newEquipment,\n          inventory: newInventory,\n          player: updatedPlayer,\n          battleLogs: [{\n            id: Date.now(),\n            text: `装备了${item.name}！`,\n            isCritical: false\n          }, ...state.battleLogs.slice(0, 19)]\n        };\n      }\n      break;\n\n    // 卸下装备\n    case 'UNEQUIP_ITEM':\n      {\n        const slot = action.payload;\n        const item = state.equipment[slot];\n        if (!item) {\n          newState = state;\n          break;\n        }\n\n        // 检查物品栏是否已满\n        if (state.inventory.items.length >= state.inventory.maxSlots) {\n          newState = {\n            ...state,\n            battleLogs: [{\n              id: Date.now(),\n              text: `物品栏已满，无法卸下${item.name}！`,\n              isCritical: true\n            }, ...state.battleLogs.slice(0, 19)]\n          };\n          break;\n        }\n\n        // 检查物品栏是否已有相同物品\n        let newInventory = {\n          ...state.inventory\n        };\n        const existingItem = newInventory.items.find(i => i.id === item.id || i.name === item.name && i.level === item.level);\n        if (existingItem) {\n          existingItem.count++;\n        } else {\n          newInventory.items.push({\n            ...item,\n            count: 1\n          });\n        }\n\n        // 创建新的装备状态\n        const newEquipment = {\n          ...state.equipment,\n          [slot]: null\n        };\n\n        // 获取新的装备加成\n        const equipStats = calculateEquipmentStats(newEquipment);\n\n        // 更新玩家属性（基础属性+装备加成）\n        const basePlayer = {\n          ...state.player\n        };\n        const updatedPlayer = {\n          ...basePlayer,\n          maxHealth: basePlayer.maxHealth - equipStats.health,\n          currentHealth: Math.min(basePlayer.currentHealth, basePlayer.maxHealth - equipStats.health),\n          attack: basePlayer.attack - equipStats.attack,\n          defense: basePlayer.defense - equipStats.defense,\n          agility: basePlayer.agility - equipStats.agility,\n          critChance: basePlayer.critChance - equipStats.critChance\n        };\n        newState = {\n          ...state,\n          equipment: newEquipment,\n          inventory: newInventory,\n          player: updatedPlayer,\n          battleLogs: [{\n            id: Date.now(),\n            text: `卸下了${item.name}！`,\n            isCritical: false\n          }, ...state.battleLogs.slice(0, 19)]\n        };\n      }\n      break;\n\n    // 丢弃物品\n    case 'DISCARD_ITEM':\n      {\n        const item = action.payload;\n\n        // 从物品栏移除物品\n        const newInventory = {\n          ...state.inventory\n        };\n        newInventory.items = newInventory.items.filter(invItem => invItem.id !== item.id);\n        newState = {\n          ...state,\n          inventory: newInventory,\n          battleLogs: [{\n            id: Date.now(),\n            text: `丢弃了${item.name} x${item.count}！`,\n            isCritical: false\n          }, ...state.battleLogs.slice(0, 19)]\n        };\n      }\n      break;\n\n    // 获得物品\n    case 'GAIN_ITEM':\n      {\n        const item = action.payload;\n\n        // 检查物品栏是否已满\n        if (state.inventory.items.length >= state.inventory.maxSlots) {\n          // 物品栏已满，无法获得物品\n          newState = {\n            ...state,\n            battleLogs: [{\n              id: Date.now(),\n              text: `物品栏已满，无法获得${item.name}！`,\n              isCritical: true\n            }, ...state.battleLogs.slice(0, 19)]\n          };\n          break;\n        }\n\n        // 检查物品栏是否已有相同物品\n        const newInventory = {\n          ...state.inventory\n        };\n        const existingItem = newInventory.items.find(i => i.id === item.id || i.name === item.name && i.level === item.level && i.rarity === item.rarity);\n        if (existingItem) {\n          // 如果已有相同物品，增加数量\n          existingItem.count++;\n        } else {\n          // 否则添加新物品\n          newInventory.items.push({\n            ...item,\n            count: 1\n          });\n        }\n        newState = {\n          ...state,\n          inventory: newInventory,\n          battleLogs: [{\n            id: Date.now(),\n            text: `获得了${item.name}！`,\n            isCritical: false\n          }, ...state.battleLogs.slice(0, 19)]\n        };\n      }\n      break;\n\n    // 玩家攻击\n    case 'PLAYER_ATTACK':\n      newState = {\n        ...state,\n        playerAttacking: true\n      };\n      break;\n\n    // 玩家攻击结束\n    case 'PLAYER_ATTACK_END':\n      newState = {\n        ...state,\n        playerAttacking: false\n      };\n      break;\n\n    // 怪物受伤\n    case 'MONSTER_DAMAGE':\n      newState = {\n        ...state,\n        monsterDamaged: true,\n        monster: {\n          ...state.monster,\n          currentHealth: Math.max(0, state.monster.currentHealth - action.payload.damage)\n        },\n        battleLogs: [{\n          id: Date.now(),\n          text: action.payload.isCritical ? `暴击！${state.player.name}对${state.monster.name}造成了${action.payload.damage}点伤害！` : `${state.player.name}对${state.monster.name}造成了${action.payload.damage}点伤害。`,\n          isCritical: action.payload.isCritical\n        }, ...state.battleLogs.slice(0, 19)]\n      };\n      break;\n\n    // 怪物受伤结束\n    case 'MONSTER_DAMAGE_END':\n      newState = {\n        ...state,\n        monsterDamaged: false\n      };\n      break;\n\n    // 怪物攻击\n    case 'MONSTER_ATTACK':\n      newState = {\n        ...state,\n        monsterAttacking: true\n      };\n      break;\n\n    // 怪物攻击结束\n    case 'MONSTER_ATTACK_END':\n      newState = {\n        ...state,\n        monsterAttacking: false\n      };\n      break;\n\n    // 玩家受伤\n    case 'PLAYER_DAMAGE':\n      newState = {\n        ...state,\n        playerDamaged: true,\n        player: {\n          ...state.player,\n          currentHealth: Math.max(0, state.player.currentHealth - action.payload.damage)\n        },\n        battleLogs: [{\n          id: Date.now(),\n          text: action.payload.isCritical ? `暴击！${state.monster.name}对${state.player.name}造成了${action.payload.damage}点伤害！` : `${state.monster.name}对${state.player.name}造成了${action.payload.damage}点伤害。`,\n          isCritical: action.payload.isCritical\n        }, ...state.battleLogs.slice(0, 19)]\n      };\n      break;\n\n    // 玩家受伤结束\n    case 'PLAYER_DAMAGE_END':\n      newState = {\n        ...state,\n        playerDamaged: false\n      };\n      break;\n\n    // 添加日志\n    case 'ADD_LOG':\n      newState = {\n        ...state,\n        battleLogs: [{\n          id: Date.now(),\n          text: action.payload.text,\n          isCritical: action.payload.isCritical\n        }, ...state.battleLogs.slice(0, 19)]\n      };\n      break;\n\n    // 玩家获得经验\n    case 'PLAYER_GAIN_EXPERIENCE':\n      {\n        const expGained = action.payload.experience;\n        let updatedPlayer = {\n          ...state.player\n        };\n        updatedPlayer.experience += expGained;\n\n        // 检查是否升级\n        let leveledUp = false;\n        while (updatedPlayer.experience >= updatedPlayer.expToNextLevel) {\n          // 升级\n          updatedPlayer.level += 1;\n          updatedPlayer.experience -= updatedPlayer.expToNextLevel;\n          updatedPlayer.expToNextLevel = calculateExpToNextLevel(updatedPlayer.level);\n\n          // 属性提升\n          const healthIncrease = Math.floor(20 + updatedPlayer.level * 5);\n          updatedPlayer.maxHealth += healthIncrease;\n          updatedPlayer.currentHealth += healthIncrease;\n          updatedPlayer.attack += 2;\n          updatedPlayer.defense += 1;\n          updatedPlayer.agility += 1;\n\n          // 每10级增加暴击率\n          if (updatedPlayer.level % 10 === 0) {\n            updatedPlayer.critChance += 0.05;\n          }\n          leveledUp = true;\n        }\n        const newLogs = leveledUp ? [{\n          id: Date.now(),\n          text: `获得${expGained}点经验！升级到${updatedPlayer.level}级！`,\n          isCritical: true\n        }, ...state.battleLogs] : [{\n          id: Date.now(),\n          text: `获得${expGained}点经验！`,\n          isCritical: false\n        }, ...state.battleLogs];\n        newState = {\n          ...state,\n          player: updatedPlayer,\n          battleLogs: newLogs.slice(0, 20)\n        };\n      }\n      break;\n\n    // 掉落装备\n    case 'DROP_EQUIPMENT':\n      {\n        // 检查是否掉落装备\n        const monster = state.monster;\n        const randomRoll = Math.random();\n        if (randomRoll <= monster.dropChance) {\n          // 生成装备\n          const equipment = generateEquipment(monster.level);\n\n          // 检查物品栏是否已满\n          if (state.inventory.items.length >= state.inventory.maxSlots) {\n            // 物品栏已满，无法获得装备\n            newState = {\n              ...state,\n              battleLogs: [{\n                id: Date.now(),\n                text: `怪物掉落了${equipment.rarityName}品质的${equipment.name}，但物品栏已满，无法拾取！`,\n                isCritical: true\n              }, ...state.battleLogs.slice(0, 19)]\n            };\n            break;\n          }\n\n          // 添加装备到物品栏\n          const newInventory = {\n            ...state.inventory\n          };\n          newInventory.items.push({\n            ...equipment,\n            count: 1\n          });\n          newState = {\n            ...state,\n            inventory: newInventory,\n            battleLogs: [{\n              id: Date.now(),\n              text: `怪物掉落了${equipment.rarityName}品质的${equipment.name}！`,\n              isCritical: true\n            }, ...state.battleLogs.slice(0, 19)]\n          };\n        } else {\n          // 没有掉落装备\n          newState = state;\n        }\n      }\n      break;\n\n    // 重置怪物\n    case 'RESET_MONSTER':\n      newState = {\n        ...state,\n        monster: generateMonster(state.player.level, state.selectedBattlefield.id),\n        battleLogs: [{\n          id: Date.now(),\n          text: \"新的怪物出现了！\",\n          isCritical: false\n        }, ...state.battleLogs.slice(0, 19)]\n      };\n      break;\n\n    // 恢复玩家生命值\n    case 'RESET_PLAYER_HEALTH':\n      newState = {\n        ...state,\n        player: {\n          ...state.player,\n          currentHealth: state.player.maxHealth\n        },\n        battleLogs: [{\n          id: Date.now(),\n          text: `${state.player.name}恢复了健康！`,\n          isCritical: false\n        }, ...state.battleLogs.slice(0, 19)]\n      };\n      break;\n\n    // 切换游戏运行状态\n    case 'TOGGLE_GAME':\n      newState = {\n        ...state,\n        gameRunning: !state.gameRunning\n      };\n      break;\n    default:\n      return state;\n  }\n\n  // 保存状态到localStorage\n  localStorage.setItem('rpgGameState', JSON.stringify(newState));\n  return newState;\n}\n\n// 创建Context\nconst GameContext = /*#__PURE__*/createContext();\n\n// 自定义钩子，方便组件使用Context\nexport function useGame() {\n  _s();\n  return useContext(GameContext);\n}\n\n// Provider组件\n_s(useGame, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function GameProvider({\n  children\n}) {\n  _s2();\n  const [state, dispatch] = useReducer(gameReducer, null, createInitialState);\n\n  // 战斗伤害计算\n  const calculateDamage = (attacker, defender) => {\n    // 基础伤害 = 攻击力 - 防御力/2\n    let baseDamage = Math.max(1, attacker.attack - defender.defense / 2);\n\n    // 敏捷影响命中和闪避\n    const agilityDiff = attacker.agility - defender.agility;\n\n    // 命中率调整 (加成或减少最多20%)\n    const hitRateAdjustment = Math.min(0.2, Math.max(-0.2, agilityDiff * 0.02));\n    const baseHitRate = 0.9; // 基础90%命中率\n    const hitRate = Math.min(0.99, Math.max(0.7, baseHitRate + hitRateAdjustment));\n\n    // 检查是否命中\n    if (Math.random() > hitRate) {\n      // 闪避\n      return 0;\n    }\n\n    // 随机波动 (±20%)\n    const randomFactor = 0.8 + Math.random() * 0.4;\n    return Math.floor(baseDamage * randomFactor);\n  };\n\n  // 游戏主循环\n  useEffect(() => {\n    // 只在战斗场景且游戏正在运行时执行战斗循环\n    if (state.gameScene !== 'battle' || !state.gameRunning || !state.monster) return;\n    const gameLoop = setInterval(() => {\n      // 检查玩家是否死亡\n      if (state.player.currentHealth <= 0) {\n        dispatch({\n          type: 'ADD_LOG',\n          payload: {\n            text: `战斗失败！${state.player.name}被${state.monster.name}击败了！`,\n            isCritical: true\n          }\n        });\n\n        // 延迟后返回选择页面\n        setTimeout(() => {\n          dispatch({\n            type: 'RETURN_TO_SELECT'\n          });\n        }, 2000);\n        return;\n      }\n\n      // 检查怪物是否死亡\n      if (state.monster.currentHealth <= 0) {\n        dispatch({\n          type: 'ADD_LOG',\n          payload: {\n            text: `战斗胜利！${state.player.name}击败了${state.monster.name}！`,\n            isCritical: true\n          }\n        });\n\n        // 获得经验值\n        dispatch({\n          type: 'PLAYER_GAIN_EXPERIENCE',\n          payload: {\n            experience: state.monster.expReward\n          }\n        });\n\n        // 检查是否掉落装备\n        dispatch({\n          type: 'DROP_EQUIPMENT'\n        });\n\n        // 恢复玩家血量\n        setTimeout(() => {\n          dispatch({\n            type: 'RESET_PLAYER_HEALTH'\n          });\n        }, 1000);\n\n        // 生成新怪物\n        setTimeout(() => {\n          dispatch({\n            type: 'RESET_MONSTER'\n          });\n        }, 2000);\n        return;\n      }\n\n      // 玩家攻击\n      dispatch({\n        type: 'PLAYER_ATTACK'\n      });\n      setTimeout(() => {\n        dispatch({\n          type: 'PLAYER_ATTACK_END'\n        });\n        const isCritical = Math.random() < state.player.critChance;\n        let damage = calculateDamage(state.player, state.monster);\n        if (damage === 0) {\n          dispatch({\n            type: 'ADD_LOG',\n            payload: {\n              text: `${state.monster.name}闪避了${state.player.name}的攻击！`,\n              isCritical: false\n            }\n          });\n        } else {\n          if (isCritical) {\n            damage = Math.floor(damage * state.player.critMultiplier);\n          }\n          dispatch({\n            type: 'MONSTER_DAMAGE',\n            payload: {\n              damage,\n              isCritical\n            }\n          });\n        }\n        setTimeout(() => {\n          dispatch({\n            type: 'MONSTER_DAMAGE_END'\n          });\n\n          // 怪物攻击 (如果还活着)\n          if (state.monster.currentHealth > 0) {\n            setTimeout(() => {\n              dispatch({\n                type: 'MONSTER_ATTACK'\n              });\n              setTimeout(() => {\n                dispatch({\n                  type: 'MONSTER_ATTACK_END'\n                });\n                const monsterCritical = Math.random() < state.monster.critChance;\n                let monsterDamage = calculateDamage(state.monster, state.player);\n                if (monsterDamage === 0) {\n                  dispatch({\n                    type: 'ADD_LOG',\n                    payload: {\n                      text: `${state.player.name}闪避了${state.monster.name}的攻击！`,\n                      isCritical: false\n                    }\n                  });\n                } else {\n                  if (monsterCritical) {\n                    monsterDamage = Math.floor(monsterDamage * state.monster.critMultiplier);\n                  }\n                  dispatch({\n                    type: 'PLAYER_DAMAGE',\n                    payload: {\n                      damage: monsterDamage,\n                      isCritical: monsterCritical\n                    }\n                  });\n                }\n                setTimeout(() => {\n                  dispatch({\n                    type: 'PLAYER_DAMAGE_END'\n                  });\n                }, 500);\n              }, 500);\n            }, 500);\n          }\n        }, 500);\n      }, 500);\n    }, state.gameSpeed);\n    return () => clearInterval(gameLoop);\n  }, [state.gameScene, state.gameRunning, state.player, state.monster, state.selectedBattlefield]);\n  const value = {\n    state,\n    dispatch,\n    calculateExpToNextLevel,\n    equipmentTypes,\n    rarities\n  };\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1120,\n    columnNumber: 9\n  }, this);\n}\n_s2(GameProvider, \"KbKDpRykewaxcxtso3VhbHZxRso=\");\n_c = GameProvider;\nvar _c;\n$RefreshReg$(_c, \"GameProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","jsxDEV","_jsxDEV","battlefields","id","name","levelRange","background","description","equipmentTypes","HEAD","emoji","slot","BODY","BELT","SHOES","WEAPON","NECKLACE","ACCESSORY","rarities","COMMON","color","chance","multiplier","UNCOMMON","RARE","EPIC","LEGENDARY","attributeTypes","HEALTH","min","max","scaling","ATTACK","DEFENSE","AGILITY","CRIT_CHANCE","equipmentAttributes","generateEquipment","playerLevel","dropRateBonus","equipLevel","Math","floor","random","equipTypeKeys","Object","keys","randomType","length","rarityRoll","selectedRarity","attrCount","possibleAttributes","shuffledAttributes","sort","selectedAttributes","slice","attributes","forEach","attrKey","attr","baseValue","levelScaling","value","round","prefixes","randomPrefix","Date","now","type","level","rarity","rarityName","rarityColor","generateMonster","battlefieldId","minLevel","maxLevel","battlefield","find","bf","monsterLevel","monsterTypes","baseHealth","baseAttack","baseDefense","baseAgility","availableMonsters","monsterType","levelMultiplier","maxHealth","currentHealth","attack","defense","agility","critChance","critMultiplier","expReward","dropChance","calculateExpToNextLevel","pow","calculateEquipmentStats","equipment","stats","health","values","equip","entries","key","createInitialState","savedState","localStorage","getItem","parsedState","JSON","parse","inventory","maxSlots","items","modal","isOpen","data","head","body","belt","shoes","weapon","necklace","accessory","e","console","error","gameScene","selectedBattlefield","player","experience","expToNextLevel","contextMenu","position","x","y","item","monster","battleLogs","playerAttacking","monsterAttacking","playerDamaged","monsterDamaged","gameSpeed","gameRunning","gameReducer","state","action","newState","payload","text","isCritical","existingEquipment","newInventory","filter","invItem","count","existingInvItem","i","push","newEquipment","equipStats","basePlayer","updatedPlayer","existingItem","damage","expGained","leveledUp","healthIncrease","newLogs","randomRoll","setItem","stringify","GameContext","useGame","_s","GameProvider","children","_s2","dispatch","calculateDamage","attacker","defender","baseDamage","agilityDiff","hitRateAdjustment","baseHitRate","hitRate","randomFactor","gameLoop","setInterval","setTimeout","monsterCritical","monsterDamage","clearInterval","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/mm-rpg-react/src/contexts/GameContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\r\n\r\n// 战场配置\r\nconst battlefields = [\r\n    {\r\n        id: 'novice',\r\n        name: '新手村',\r\n        levelRange: [1, 10],\r\n        background: '#e6f7ff',\r\n        description: '适合1-10级玩家的新手战场'\r\n    },\r\n    {\r\n        id: 'intermediate',\r\n        name: '进阶森林',\r\n        levelRange: [11, 20],\r\n        background: '#e6ffe6',\r\n        description: '适合11-20级玩家的进阶战场'\r\n    },\r\n    {\r\n        id: 'hell',\r\n        name: '地狱级难度',\r\n        levelRange: [21, 30],\r\n        background: '#ffe6e6',\r\n        description: '适合21-30级玩家的高难度战场'\r\n    }\r\n];\r\n\r\n// 装备类型定义\r\nconst equipmentTypes = {\r\n    HEAD: { id: 'HEAD', name: '头部', emoji: '🧢', slot: 'head' },\r\n    BODY: { id: 'BODY', name: '身体', emoji: '👕', slot: 'body' },\r\n    BELT: { id: 'BELT', name: '腰带', emoji: '🧶', slot: 'belt' },\r\n    SHOES: { id: 'SHOES', name: '鞋子', emoji: '👞', slot: 'shoes' },\r\n    WEAPON: { id: 'WEAPON', name: '武器', emoji: '🗡️', slot: 'weapon' },\r\n    NECKLACE: { id: 'NECKLACE', name: '项链', emoji: '📿', slot: 'necklace' },\r\n    ACCESSORY: { id: 'ACCESSORY', name: '首饰', emoji: '💍', slot: 'accessory' }\r\n};\r\n\r\n// 装备稀有度定义\r\nconst rarities = {\r\n    COMMON: { id: 'COMMON', name: '普通', color: '#a0a0a0', chance: 0.6, multiplier: 1 },\r\n    UNCOMMON: { id: 'UNCOMMON', name: '优秀', color: '#1eff00', chance: 0.3, multiplier: 1.5 },\r\n    RARE: { id: 'RARE', name: '精良', color: '#0070dd', chance: 0.08, multiplier: 2 },\r\n    EPIC: { id: 'EPIC', name: '史诗', color: '#a335ee', chance: 0.02, multiplier: 2.5 },\r\n    LEGENDARY: { id: 'LEGENDARY', name: '传说', color: '#ff8000', chance: 0.004, multiplier: 3 }\r\n};\r\n\r\n// 装备属性定义\r\nconst attributeTypes = {\r\n    HEALTH: { id: 'HEALTH', name: '生命值', min: 5, max: 20, scaling: 2 },\r\n    ATTACK: { id: 'ATTACK', name: '攻击力', min: 1, max: 5, scaling: 0.5 },\r\n    DEFENSE: { id: 'DEFENSE', name: '防御力', min: 1, max: 3, scaling: 0.3 },\r\n    AGILITY: { id: 'AGILITY', name: '敏捷度', min: 1, max: 3, scaling: 0.3 },\r\n    CRIT_CHANCE: { id: 'CRIT_CHANCE', name: '暴击率', min: 0.01, max: 0.03, scaling: 0.003 }\r\n};\r\n\r\n// 按装备类型划分可能的属性 (某些属性只在特定装备上出现)\r\nconst equipmentAttributes = {\r\n    HEAD: ['HEALTH', 'DEFENSE'],\r\n    BODY: ['HEALTH', 'DEFENSE'],\r\n    BELT: ['HEALTH', 'AGILITY'],\r\n    SHOES: ['AGILITY', 'DEFENSE'],\r\n    WEAPON: ['ATTACK', 'CRIT_CHANCE'],\r\n    NECKLACE: ['HEALTH', 'CRIT_CHANCE'],\r\n    ACCESSORY: ['ATTACK', 'AGILITY', 'CRIT_CHANCE']\r\n};\r\n\r\n// 随机生成装备\r\nconst generateEquipment = (playerLevel, dropRateBonus = 0) => {\r\n    // 装备等级范围\r\n    const equipLevel = Math.max(1, Math.floor(playerLevel * (0.8 + Math.random() * 0.4)));\r\n\r\n    // 随机装备类型\r\n    const equipTypeKeys = Object.keys(equipmentTypes);\r\n    const randomType = equipmentTypes[equipTypeKeys[Math.floor(Math.random() * equipTypeKeys.length)]];\r\n\r\n    // 随机稀有度 (使用概率权重)\r\n    let rarityRoll = Math.random() - dropRateBonus; // 掉落率加成提高稀有度概率\r\n    rarityRoll = Math.max(0, rarityRoll); // 确保不会是负数\r\n\r\n    let selectedRarity;\r\n    if (rarityRoll < rarities.LEGENDARY.chance) {\r\n        selectedRarity = rarities.LEGENDARY;\r\n    } else if (rarityRoll < rarities.EPIC.chance + rarities.LEGENDARY.chance) {\r\n        selectedRarity = rarities.EPIC;\r\n    } else if (rarityRoll < rarities.RARE.chance + rarities.EPIC.chance + rarities.LEGENDARY.chance) {\r\n        selectedRarity = rarities.RARE;\r\n    } else if (rarityRoll < rarities.UNCOMMON.chance + rarities.RARE.chance + rarities.EPIC.chance + rarities.LEGENDARY.chance) {\r\n        selectedRarity = rarities.UNCOMMON;\r\n    } else {\r\n        selectedRarity = rarities.COMMON;\r\n    }\r\n\r\n    // 确定属性数量 (基于稀有度)\r\n    const attrCount = Math.floor(Math.random() * 2) + 1; // 1-2个属性\r\n\r\n    // 随机选择属性\r\n    const possibleAttributes = equipmentAttributes[randomType.id];\r\n    const shuffledAttributes = [...possibleAttributes].sort(() => 0.5 - Math.random());\r\n    const selectedAttributes = shuffledAttributes.slice(0, attrCount);\r\n\r\n    // 为每个属性随机生成数值\r\n    const attributes = {};\r\n    selectedAttributes.forEach(attrKey => {\r\n        const attr = attributeTypes[attrKey];\r\n        // 基础属性值 + 等级缩放 * 稀有度倍率\r\n        const baseValue = attr.min + Math.random() * (attr.max - attr.min);\r\n        const levelScaling = attr.scaling * equipLevel;\r\n        let value = (baseValue + levelScaling) * selectedRarity.multiplier;\r\n\r\n        // 对暴击率进行特殊处理，确保不超过合理范围\r\n        if (attrKey === 'CRIT_CHANCE') {\r\n            value = Math.min(value, 0.25); // 最高25%暴击率\r\n            value = Math.round(value * 1000) / 1000; // 保留3位小数\r\n        } else {\r\n            value = Math.floor(value); // 其他属性取整\r\n        }\r\n\r\n        attributes[attrKey] = value;\r\n    });\r\n\r\n    // 生成装备名称\r\n    const prefixes = [\r\n        '锋利的', '坚固的', '闪亮的', '破旧的', '神秘的',\r\n        '古老的', '强化的', '精制的', '魔法的', '传承的'\r\n    ];\r\n    const randomPrefix = prefixes[Math.floor(Math.random() * prefixes.length)];\r\n    const name = `${randomPrefix} ${randomType.name}`;\r\n\r\n    // 生成唯一ID\r\n    const id = `equip_${Date.now()}_${Math.floor(Math.random() * 1000)}`;\r\n\r\n    return {\r\n        id,\r\n        name,\r\n        type: randomType.id,\r\n        emoji: randomType.emoji,\r\n        slot: randomType.slot,\r\n        level: equipLevel,\r\n        rarity: selectedRarity.id,\r\n        rarityName: selectedRarity.name,\r\n        rarityColor: selectedRarity.color,\r\n        attributes\r\n    };\r\n};\r\n\r\n// 怪物配置（根据等级生成）\r\nconst generateMonster = (playerLevel, battlefieldId) => {\r\n    // 根据战场确定怪物等级范围\r\n    let minLevel = playerLevel - 2;\r\n    let maxLevel = playerLevel + 2;\r\n    const battlefield = battlefields.find(bf => bf.id === battlefieldId);\r\n\r\n    // 确保怪物等级在战场范围内\r\n    if (battlefield) {\r\n        minLevel = Math.max(minLevel, battlefield.levelRange[0]);\r\n        maxLevel = Math.min(maxLevel, battlefield.levelRange[1]);\r\n    }\r\n\r\n    // 随机确定怪物等级\r\n    const monsterLevel = Math.floor(Math.random() * (maxLevel - minLevel + 1)) + minLevel;\r\n\r\n    // 怪物类型\r\n    const monsterTypes = [\r\n        { name: '史莱姆', emoji: '🟢', baseHealth: 50, baseAttack: 5, baseDefense: 2, baseAgility: 1 },\r\n        { name: '蝙蝠', emoji: '🦇', baseHealth: 40, baseAttack: 7, baseDefense: 1, baseAgility: 5 },\r\n        { name: '骷髅', emoji: '💀', baseHealth: 60, baseAttack: 6, baseDefense: 3, baseAgility: 2 },\r\n        { name: '蜘蛛', emoji: '🕷️', baseHealth: 45, baseAttack: 6, baseDefense: 2, baseAgility: 4 },\r\n        { name: '幽灵', emoji: '👻', baseHealth: 55, baseAttack: 8, baseDefense: 0, baseAgility: 6 },\r\n        { name: '巨魔', emoji: '👹', baseHealth: 70, baseAttack: 9, baseDefense: 4, baseAgility: 1 },\r\n        { name: '恶魔', emoji: '😈', baseHealth: 65, baseAttack: 10, baseDefense: 3, baseAgility: 3 }\r\n    ];\r\n\r\n    // 根据战场难度选择怪物\r\n    let availableMonsters;\r\n    if (battlefieldId === 'novice') {\r\n        availableMonsters = monsterTypes.slice(0, 3); // 简单怪物\r\n    } else if (battlefieldId === 'intermediate') {\r\n        availableMonsters = monsterTypes.slice(2, 5); // 中等怪物\r\n    } else {\r\n        availableMonsters = monsterTypes.slice(4); // 困难怪物\r\n    }\r\n\r\n    // 随机选择一种怪物\r\n    const monsterType = availableMonsters[Math.floor(Math.random() * availableMonsters.length)];\r\n\r\n    // 基于等级计算怪物属性\r\n    const levelMultiplier = 1 + (monsterLevel - 1) * 0.1; // 每级提升10%\r\n\r\n    return {\r\n        name: `${monsterLevel}级${monsterType.name}`,\r\n        emoji: monsterType.emoji,\r\n        level: monsterLevel,\r\n        maxHealth: Math.floor(monsterType.baseHealth * levelMultiplier),\r\n        currentHealth: Math.floor(monsterType.baseHealth * levelMultiplier),\r\n        attack: Math.floor(monsterType.baseAttack * levelMultiplier),\r\n        defense: Math.floor(monsterType.baseDefense * levelMultiplier),\r\n        agility: Math.floor(monsterType.baseAgility * levelMultiplier),\r\n        critChance: 0.1 + monsterLevel * 0.005, // 基础10%，每级+0.5%\r\n        critMultiplier: 1.5,\r\n        // 怪物经验值：基础值 + 等级加成\r\n        expReward: 10 + monsterLevel * 5,\r\n        // 掉落装备概率 (20% + 等级加成)\r\n        dropChance: 0.2 + monsterLevel * 0.01\r\n    };\r\n};\r\n\r\n// 计算升级所需经验\r\nconst calculateExpToNextLevel = (level) => {\r\n    // 使用指数增长公式: 100 * (level)^1.5\r\n    return Math.floor(100 * Math.pow(level, 1.5));\r\n};\r\n\r\n// 计算装备提供的属性总和\r\nconst calculateEquipmentStats = (equipment) => {\r\n    const stats = {\r\n        health: 0,\r\n        attack: 0,\r\n        defense: 0,\r\n        agility: 0,\r\n        critChance: 0\r\n    };\r\n\r\n    // 遍历所有装备槽位\r\n    Object.values(equipment).forEach(equip => {\r\n        if (!equip) return; // 如果槽位没有装备\r\n\r\n        // 累加装备属性\r\n        Object.entries(equip.attributes).forEach(([key, value]) => {\r\n            switch (key) {\r\n                case 'HEALTH':\r\n                    stats.health += value;\r\n                    break;\r\n                case 'ATTACK':\r\n                    stats.attack += value;\r\n                    break;\r\n                case 'DEFENSE':\r\n                    stats.defense += value;\r\n                    break;\r\n                case 'AGILITY':\r\n                    stats.agility += value;\r\n                    break;\r\n                case 'CRIT_CHANCE':\r\n                    stats.critChance += value;\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        });\r\n    });\r\n\r\n    return stats;\r\n};\r\n\r\n// 初始状态\r\n// 初始状态\r\nconst createInitialState = () => {\r\n    try {\r\n        // 尝试从localStorage读取保存的状态\r\n        const savedState = localStorage.getItem('rpgGameState');\r\n        if (savedState) {\r\n            const parsedState = JSON.parse(savedState);\r\n\r\n            // 检查并确保所有关键属性都存在，如果不存在则使用默认值\r\n            // 确保inventory存在\r\n            if (!parsedState.inventory) {\r\n                parsedState.inventory = {\r\n                    maxSlots: 20,\r\n                    items: []\r\n                };\r\n            }\r\n\r\n            // 确保modal存在\r\n            if (!parsedState.modal) {\r\n                parsedState.modal = {\r\n                    isOpen: false,\r\n                    type: null,\r\n                    data: null\r\n                };\r\n            }\r\n\r\n            // 确保equipment存在\r\n            if (!parsedState.equipment) {\r\n                parsedState.equipment = {\r\n                    head: null,\r\n                    body: null,\r\n                    belt: null,\r\n                    shoes: null,\r\n                    weapon: null,\r\n                    necklace: null,\r\n                    accessory: null\r\n                };\r\n            }\r\n\r\n            return parsedState;\r\n        }\r\n    } catch (e) {\r\n        console.error('Failed to parse saved game state:', e);\r\n    }\r\n\r\n    // 默认初始状态\r\n    return {\r\n        // 游戏场景状态: 'select' - 战场选择页面, 'battle' - 战斗页面\r\n        gameScene: 'select',\r\n        selectedBattlefield: null,\r\n\r\n        // 角色基础属性\r\n        player: {\r\n            name: \"勇者\",\r\n            level: 1,\r\n            experience: 0,\r\n            expToNextLevel: calculateExpToNextLevel(1),\r\n            maxHealth: 100,\r\n            currentHealth: 100,\r\n            attack: 10,\r\n            defense: 5,\r\n            agility: 3, // 新增敏捷度属性\r\n            critChance: 0.1,\r\n            critMultiplier: 1.5\r\n        },\r\n\r\n        // 装备系统\r\n        equipment: {\r\n            head: null,\r\n            body: null,\r\n            belt: null,\r\n            shoes: null,\r\n            weapon: null,\r\n            necklace: null,\r\n            accessory: null\r\n        },\r\n\r\n        // 物品栏\r\n        inventory: {\r\n            maxSlots: 20, // 物品栏最大格子数\r\n            items: [] // 物品列表，每个物品包含 {id, count, ...itemData}\r\n        },\r\n\r\n        // 模态窗口状态\r\n        modal: {\r\n            isOpen: false,\r\n            type: null, // 'character', 'equipment', 'inventory'\r\n            data: null\r\n        },\r\n\r\n        // 物品右键菜单状态\r\n        contextMenu: {\r\n            isOpen: false,\r\n            position: { x: 0, y: 0 },\r\n            item: null\r\n        },\r\n\r\n        monster: null,\r\n\r\n        battleLogs: [],\r\n        playerAttacking: false,\r\n        monsterAttacking: false,\r\n        playerDamaged: false,\r\n        monsterDamaged: false,\r\n        gameSpeed: 2000, // 每回合间隔(毫秒)\r\n        gameRunning: true,\r\n        battlefields: battlefields\r\n    };\r\n};\r\n\r\n// Reducer函数来处理状态更新\r\nfunction gameReducer(state, action) {\r\n    let newState;\r\n\r\n    switch (action.type) {\r\n        // 选择战场\r\n        case 'SELECT_BATTLEFIELD':\r\n            newState = {\r\n                ...state,\r\n                gameScene: 'battle',\r\n                selectedBattlefield: action.payload,\r\n                battleLogs: [{\r\n                    id: Date.now(),\r\n                    text: `进入${action.payload.name}战场！`,\r\n                    isCritical: false\r\n                }],\r\n                // 生成新怪物\r\n                monster: generateMonster(state.player.level, action.payload.id)\r\n            };\r\n            break;\r\n\r\n        // 返回选择页面\r\n        case 'RETURN_TO_SELECT':\r\n            newState = {\r\n                ...state,\r\n                gameScene: 'select',\r\n                monster: null,\r\n                battleLogs: []\r\n            };\r\n            break;\r\n\r\n        // 打开模态窗口\r\n        case 'OPEN_MODAL':\r\n            newState = {\r\n                ...state,\r\n                modal: {\r\n                    isOpen: true,\r\n                    type: action.payload.type,\r\n                    data: action.payload.data || null\r\n                }\r\n            };\r\n            break;\r\n\r\n        // 关闭模态窗口\r\n        case 'CLOSE_MODAL':\r\n            newState = {\r\n                ...state,\r\n                modal: {\r\n                    ...state.modal,\r\n                    isOpen: false\r\n                }\r\n            };\r\n            break;\r\n\r\n        // 打开右键菜单\r\n        case 'OPEN_CONTEXT_MENU':\r\n            newState = {\r\n                ...state,\r\n                contextMenu: {\r\n                    isOpen: true,\r\n                    position: action.payload.position,\r\n                    item: action.payload.item\r\n                }\r\n            };\r\n            break;\r\n\r\n        // 关闭右键菜单\r\n        case 'CLOSE_CONTEXT_MENU':\r\n            newState = {\r\n                ...state,\r\n                contextMenu: {\r\n                    ...state.contextMenu,\r\n                    isOpen: false\r\n                }\r\n            };\r\n            break;\r\n\r\n        // 装备物品\r\n        case 'EQUIP_ITEM':\r\n            {\r\n                const item = action.payload;\r\n                const { slot } = item;\r\n\r\n                // 检查是否已经有装备在该槽位\r\n                const existingEquipment = state.equipment[slot];\r\n                let newInventory = { ...state.inventory };\r\n\r\n                // 从物品栏移除要装备的物品\r\n                newInventory.items = newInventory.items.filter(invItem => {\r\n                    if (invItem.id === item.id) {\r\n                        if (invItem.count > 1) {\r\n                            invItem.count--;\r\n                            return true;\r\n                        }\r\n                        return false;\r\n                    }\r\n                    return true;\r\n                });\r\n\r\n                // 如果槽位已有装备，将其放回物品栏\r\n                if (existingEquipment) {\r\n                    // 检查物品栏是否已有相同物品\r\n                    const existingInvItem = newInventory.items.find(i =>\r\n                        i.id === existingEquipment.id ||\r\n                        (i.name === existingEquipment.name && i.level === existingEquipment.level)\r\n                    );\r\n\r\n                    if (existingInvItem) {\r\n                        existingInvItem.count++;\r\n                    } else {\r\n                        // 检查物品栏是否已满\r\n                        if (newInventory.items.length < newInventory.maxSlots) {\r\n                            newInventory.items.push({ ...existingEquipment, count: 1 });\r\n                        } else {\r\n                            // 如果满了，添加提示\r\n                            newState = {\r\n                                ...state,\r\n                                battleLogs: [\r\n                                    {\r\n                                        id: Date.now(),\r\n                                        text: `物品栏已满，无法卸下${existingEquipment.name}！`,\r\n                                        isCritical: true\r\n                                    },\r\n                                    ...state.battleLogs.slice(0, 19)\r\n                                ]\r\n                            };\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // 创建新的装备状态\r\n                const newEquipment = {\r\n                    ...state.equipment,\r\n                    [slot]: { ...item, count: 1 }\r\n                };\r\n\r\n                // 获取新的装备加成\r\n                const equipStats = calculateEquipmentStats(newEquipment);\r\n\r\n                // 更新玩家属性（基础属性+装备加成）\r\n                const basePlayer = { ...state.player };\r\n                const updatedPlayer = {\r\n                    ...basePlayer,\r\n                    maxHealth: basePlayer.maxHealth + equipStats.health,\r\n                    currentHealth: Math.min(basePlayer.currentHealth + equipStats.health, basePlayer.maxHealth + equipStats.health),\r\n                    attack: basePlayer.attack + equipStats.attack,\r\n                    defense: basePlayer.defense + equipStats.defense,\r\n                    agility: basePlayer.agility + equipStats.agility,\r\n                    critChance: basePlayer.critChance + equipStats.critChance\r\n                };\r\n\r\n                newState = {\r\n                    ...state,\r\n                    equipment: newEquipment,\r\n                    inventory: newInventory,\r\n                    player: updatedPlayer,\r\n                    battleLogs: [\r\n                        {\r\n                            id: Date.now(),\r\n                            text: `装备了${item.name}！`,\r\n                            isCritical: false\r\n                        },\r\n                        ...state.battleLogs.slice(0, 19)\r\n                    ]\r\n                };\r\n            }\r\n            break;\r\n\r\n        // 卸下装备\r\n        case 'UNEQUIP_ITEM':\r\n            {\r\n                const slot = action.payload;\r\n                const item = state.equipment[slot];\r\n\r\n                if (!item) {\r\n                    newState = state;\r\n                    break;\r\n                }\r\n\r\n                // 检查物品栏是否已满\r\n                if (state.inventory.items.length >= state.inventory.maxSlots) {\r\n                    newState = {\r\n                        ...state,\r\n                        battleLogs: [\r\n                            {\r\n                                id: Date.now(),\r\n                                text: `物品栏已满，无法卸下${item.name}！`,\r\n                                isCritical: true\r\n                            },\r\n                            ...state.battleLogs.slice(0, 19)\r\n                        ]\r\n                    };\r\n                    break;\r\n                }\r\n\r\n                // 检查物品栏是否已有相同物品\r\n                let newInventory = { ...state.inventory };\r\n                const existingItem = newInventory.items.find(i =>\r\n                    i.id === item.id ||\r\n                    (i.name === item.name && i.level === item.level)\r\n                );\r\n\r\n                if (existingItem) {\r\n                    existingItem.count++;\r\n                } else {\r\n                    newInventory.items.push({ ...item, count: 1 });\r\n                }\r\n\r\n                // 创建新的装备状态\r\n                const newEquipment = {\r\n                    ...state.equipment,\r\n                    [slot]: null\r\n                };\r\n\r\n                // 获取新的装备加成\r\n                const equipStats = calculateEquipmentStats(newEquipment);\r\n\r\n                // 更新玩家属性（基础属性+装备加成）\r\n                const basePlayer = { ...state.player };\r\n                const updatedPlayer = {\r\n                    ...basePlayer,\r\n                    maxHealth: basePlayer.maxHealth - equipStats.health,\r\n                    currentHealth: Math.min(basePlayer.currentHealth, basePlayer.maxHealth - equipStats.health),\r\n                    attack: basePlayer.attack - equipStats.attack,\r\n                    defense: basePlayer.defense - equipStats.defense,\r\n                    agility: basePlayer.agility - equipStats.agility,\r\n                    critChance: basePlayer.critChance - equipStats.critChance\r\n                };\r\n\r\n                newState = {\r\n                    ...state,\r\n                    equipment: newEquipment,\r\n                    inventory: newInventory,\r\n                    player: updatedPlayer,\r\n                    battleLogs: [\r\n                        {\r\n                            id: Date.now(),\r\n                            text: `卸下了${item.name}！`,\r\n                            isCritical: false\r\n                        },\r\n                        ...state.battleLogs.slice(0, 19)\r\n                    ]\r\n                };\r\n            }\r\n            break;\r\n\r\n        // 丢弃物品\r\n        case 'DISCARD_ITEM':\r\n            {\r\n                const item = action.payload;\r\n\r\n                // 从物品栏移除物品\r\n                const newInventory = { ...state.inventory };\r\n                newInventory.items = newInventory.items.filter(invItem => invItem.id !== item.id);\r\n\r\n                newState = {\r\n                    ...state,\r\n                    inventory: newInventory,\r\n                    battleLogs: [\r\n                        {\r\n                            id: Date.now(),\r\n                            text: `丢弃了${item.name} x${item.count}！`,\r\n                            isCritical: false\r\n                        },\r\n                        ...state.battleLogs.slice(0, 19)\r\n                    ]\r\n                };\r\n            }\r\n            break;\r\n\r\n        // 获得物品\r\n        case 'GAIN_ITEM':\r\n            {\r\n                const item = action.payload;\r\n\r\n                // 检查物品栏是否已满\r\n                if (state.inventory.items.length >= state.inventory.maxSlots) {\r\n                    // 物品栏已满，无法获得物品\r\n                    newState = {\r\n                        ...state,\r\n                        battleLogs: [\r\n                            {\r\n                                id: Date.now(),\r\n                                text: `物品栏已满，无法获得${item.name}！`,\r\n                                isCritical: true\r\n                            },\r\n                            ...state.battleLogs.slice(0, 19)\r\n                        ]\r\n                    };\r\n                    break;\r\n                }\r\n\r\n                // 检查物品栏是否已有相同物品\r\n                const newInventory = { ...state.inventory };\r\n                const existingItem = newInventory.items.find(i =>\r\n                    i.id === item.id ||\r\n                    (i.name === item.name && i.level === item.level && i.rarity === item.rarity)\r\n                );\r\n\r\n                if (existingItem) {\r\n                    // 如果已有相同物品，增加数量\r\n                    existingItem.count++;\r\n                } else {\r\n                    // 否则添加新物品\r\n                    newInventory.items.push({ ...item, count: 1 });\r\n                }\r\n\r\n                newState = {\r\n                    ...state,\r\n                    inventory: newInventory,\r\n                    battleLogs: [\r\n                        {\r\n                            id: Date.now(),\r\n                            text: `获得了${item.name}！`,\r\n                            isCritical: false\r\n                        },\r\n                        ...state.battleLogs.slice(0, 19)\r\n                    ]\r\n                };\r\n            }\r\n            break;\r\n\r\n        // 玩家攻击\r\n        case 'PLAYER_ATTACK':\r\n            newState = {\r\n                ...state,\r\n                playerAttacking: true\r\n            };\r\n            break;\r\n\r\n        // 玩家攻击结束\r\n        case 'PLAYER_ATTACK_END':\r\n            newState = {\r\n                ...state,\r\n                playerAttacking: false\r\n            };\r\n            break;\r\n\r\n        // 怪物受伤\r\n        case 'MONSTER_DAMAGE':\r\n            newState = {\r\n                ...state,\r\n                monsterDamaged: true,\r\n                monster: {\r\n                    ...state.monster,\r\n                    currentHealth: Math.max(0, state.monster.currentHealth - action.payload.damage)\r\n                },\r\n                battleLogs: [\r\n                    {\r\n                        id: Date.now(),\r\n                        text: action.payload.isCritical\r\n                            ? `暴击！${state.player.name}对${state.monster.name}造成了${action.payload.damage}点伤害！`\r\n                            : `${state.player.name}对${state.monster.name}造成了${action.payload.damage}点伤害。`,\r\n                        isCritical: action.payload.isCritical\r\n                    },\r\n                    ...state.battleLogs.slice(0, 19)\r\n                ]\r\n            };\r\n            break;\r\n\r\n        // 怪物受伤结束\r\n        case 'MONSTER_DAMAGE_END':\r\n            newState = {\r\n                ...state,\r\n                monsterDamaged: false\r\n            };\r\n            break;\r\n\r\n        // 怪物攻击\r\n        case 'MONSTER_ATTACK':\r\n            newState = {\r\n                ...state,\r\n                monsterAttacking: true\r\n            };\r\n            break;\r\n\r\n        // 怪物攻击结束\r\n        case 'MONSTER_ATTACK_END':\r\n            newState = {\r\n                ...state,\r\n                monsterAttacking: false\r\n            };\r\n            break;\r\n\r\n        // 玩家受伤\r\n        case 'PLAYER_DAMAGE':\r\n            newState = {\r\n                ...state,\r\n                playerDamaged: true,\r\n                player: {\r\n                    ...state.player,\r\n                    currentHealth: Math.max(0, state.player.currentHealth - action.payload.damage)\r\n                },\r\n                battleLogs: [\r\n                    {\r\n                        id: Date.now(),\r\n                        text: action.payload.isCritical\r\n                            ? `暴击！${state.monster.name}对${state.player.name}造成了${action.payload.damage}点伤害！`\r\n                            : `${state.monster.name}对${state.player.name}造成了${action.payload.damage}点伤害。`,\r\n                        isCritical: action.payload.isCritical\r\n                    },\r\n                    ...state.battleLogs.slice(0, 19)\r\n                ]\r\n            };\r\n            break;\r\n\r\n        // 玩家受伤结束\r\n        case 'PLAYER_DAMAGE_END':\r\n            newState = {\r\n                ...state,\r\n                playerDamaged: false\r\n            };\r\n            break;\r\n\r\n        // 添加日志\r\n        case 'ADD_LOG':\r\n            newState = {\r\n                ...state,\r\n                battleLogs: [\r\n                    { id: Date.now(), text: action.payload.text, isCritical: action.payload.isCritical },\r\n                    ...state.battleLogs.slice(0, 19)\r\n                ]\r\n            };\r\n            break;\r\n\r\n        // 玩家获得经验\r\n        case 'PLAYER_GAIN_EXPERIENCE':\r\n            {\r\n                const expGained = action.payload.experience;\r\n                let updatedPlayer = { ...state.player };\r\n                updatedPlayer.experience += expGained;\r\n\r\n                // 检查是否升级\r\n                let leveledUp = false;\r\n                while (updatedPlayer.experience >= updatedPlayer.expToNextLevel) {\r\n                    // 升级\r\n                    updatedPlayer.level += 1;\r\n                    updatedPlayer.experience -= updatedPlayer.expToNextLevel;\r\n                    updatedPlayer.expToNextLevel = calculateExpToNextLevel(updatedPlayer.level);\r\n\r\n                    // 属性提升\r\n                    const healthIncrease = Math.floor(20 + updatedPlayer.level * 5);\r\n                    updatedPlayer.maxHealth += healthIncrease;\r\n                    updatedPlayer.currentHealth += healthIncrease;\r\n                    updatedPlayer.attack += 2;\r\n                    updatedPlayer.defense += 1;\r\n                    updatedPlayer.agility += 1;\r\n\r\n                    // 每10级增加暴击率\r\n                    if (updatedPlayer.level % 10 === 0) {\r\n                        updatedPlayer.critChance += 0.05;\r\n                    }\r\n\r\n                    leveledUp = true;\r\n                }\r\n\r\n                const newLogs = leveledUp\r\n                    ? [\r\n                        {\r\n                            id: Date.now(),\r\n                            text: `获得${expGained}点经验！升级到${updatedPlayer.level}级！`,\r\n                            isCritical: true\r\n                        },\r\n                        ...state.battleLogs\r\n                    ]\r\n                    : [\r\n                        {\r\n                            id: Date.now(),\r\n                            text: `获得${expGained}点经验！`,\r\n                            isCritical: false\r\n                        },\r\n                        ...state.battleLogs\r\n                    ];\r\n\r\n                newState = {\r\n                    ...state,\r\n                    player: updatedPlayer,\r\n                    battleLogs: newLogs.slice(0, 20)\r\n                };\r\n            }\r\n            break;\r\n\r\n        // 掉落装备\r\n        case 'DROP_EQUIPMENT':\r\n            {\r\n                // 检查是否掉落装备\r\n                const monster = state.monster;\r\n                const randomRoll = Math.random();\r\n\r\n                if (randomRoll <= monster.dropChance) {\r\n                    // 生成装备\r\n                    const equipment = generateEquipment(monster.level);\r\n\r\n                    // 检查物品栏是否已满\r\n                    if (state.inventory.items.length >= state.inventory.maxSlots) {\r\n                        // 物品栏已满，无法获得装备\r\n                        newState = {\r\n                            ...state,\r\n                            battleLogs: [\r\n                                {\r\n                                    id: Date.now(),\r\n                                    text: `怪物掉落了${equipment.rarityName}品质的${equipment.name}，但物品栏已满，无法拾取！`,\r\n                                    isCritical: true\r\n                                },\r\n                                ...state.battleLogs.slice(0, 19)\r\n                            ]\r\n                        };\r\n                        break;\r\n                    }\r\n\r\n                    // 添加装备到物品栏\r\n                    const newInventory = { ...state.inventory };\r\n                    newInventory.items.push({ ...equipment, count: 1 });\r\n\r\n                    newState = {\r\n                        ...state,\r\n                        inventory: newInventory,\r\n                        battleLogs: [\r\n                            {\r\n                                id: Date.now(),\r\n                                text: `怪物掉落了${equipment.rarityName}品质的${equipment.name}！`,\r\n                                isCritical: true\r\n                            },\r\n                            ...state.battleLogs.slice(0, 19)\r\n                        ]\r\n                    };\r\n                } else {\r\n                    // 没有掉落装备\r\n                    newState = state;\r\n                }\r\n            }\r\n            break;\r\n\r\n        // 重置怪物\r\n        case 'RESET_MONSTER':\r\n            newState = {\r\n                ...state,\r\n                monster: generateMonster(state.player.level, state.selectedBattlefield.id),\r\n                battleLogs: [\r\n                    { id: Date.now(), text: \"新的怪物出现了！\", isCritical: false },\r\n                    ...state.battleLogs.slice(0, 19)\r\n                ]\r\n            };\r\n            break;\r\n\r\n        // 恢复玩家生命值\r\n        case 'RESET_PLAYER_HEALTH':\r\n            newState = {\r\n                ...state,\r\n                player: {\r\n                    ...state.player,\r\n                    currentHealth: state.player.maxHealth\r\n                },\r\n                battleLogs: [\r\n                    { id: Date.now(), text: `${state.player.name}恢复了健康！`, isCritical: false },\r\n                    ...state.battleLogs.slice(0, 19)\r\n                ]\r\n            };\r\n            break;\r\n\r\n        // 切换游戏运行状态\r\n        case 'TOGGLE_GAME':\r\n            newState = {\r\n                ...state,\r\n                gameRunning: !state.gameRunning\r\n            };\r\n            break;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n\r\n    // 保存状态到localStorage\r\n    localStorage.setItem('rpgGameState', JSON.stringify(newState));\r\n    return newState;\r\n}\r\n\r\n// 创建Context\r\nconst GameContext = createContext();\r\n\r\n// 自定义钩子，方便组件使用Context\r\nexport function useGame() {\r\n    return useContext(GameContext);\r\n}\r\n\r\n// Provider组件\r\nexport function GameProvider({ children }) {\r\n    const [state, dispatch] = useReducer(gameReducer, null, createInitialState);\r\n\r\n    // 战斗伤害计算\r\n    const calculateDamage = (attacker, defender) => {\r\n        // 基础伤害 = 攻击力 - 防御力/2\r\n        let baseDamage = Math.max(1, attacker.attack - defender.defense / 2);\r\n\r\n        // 敏捷影响命中和闪避\r\n        const agilityDiff = attacker.agility - defender.agility;\r\n\r\n        // 命中率调整 (加成或减少最多20%)\r\n        const hitRateAdjustment = Math.min(0.2, Math.max(-0.2, agilityDiff * 0.02));\r\n        const baseHitRate = 0.9; // 基础90%命中率\r\n        const hitRate = Math.min(0.99, Math.max(0.7, baseHitRate + hitRateAdjustment));\r\n\r\n        // 检查是否命中\r\n        if (Math.random() > hitRate) {\r\n            // 闪避\r\n            return 0;\r\n        }\r\n\r\n        // 随机波动 (±20%)\r\n        const randomFactor = 0.8 + Math.random() * 0.4;\r\n        return Math.floor(baseDamage * randomFactor);\r\n    };\r\n\r\n    // 游戏主循环\r\n    useEffect(() => {\r\n        // 只在战斗场景且游戏正在运行时执行战斗循环\r\n        if (state.gameScene !== 'battle' || !state.gameRunning || !state.monster) return;\r\n\r\n        const gameLoop = setInterval(() => {\r\n            // 检查玩家是否死亡\r\n            if (state.player.currentHealth <= 0) {\r\n                dispatch({\r\n                    type: 'ADD_LOG',\r\n                    payload: {\r\n                        text: `战斗失败！${state.player.name}被${state.monster.name}击败了！`,\r\n                        isCritical: true\r\n                    }\r\n                });\r\n\r\n                // 延迟后返回选择页面\r\n                setTimeout(() => {\r\n                    dispatch({ type: 'RETURN_TO_SELECT' });\r\n                }, 2000);\r\n\r\n                return;\r\n            }\r\n\r\n            // 检查怪物是否死亡\r\n            if (state.monster.currentHealth <= 0) {\r\n                dispatch({\r\n                    type: 'ADD_LOG',\r\n                    payload: {\r\n                        text: `战斗胜利！${state.player.name}击败了${state.monster.name}！`,\r\n                        isCritical: true\r\n                    }\r\n                });\r\n\r\n                // 获得经验值\r\n                dispatch({\r\n                    type: 'PLAYER_GAIN_EXPERIENCE',\r\n                    payload: { experience: state.monster.expReward }\r\n                });\r\n\r\n                // 检查是否掉落装备\r\n                dispatch({ type: 'DROP_EQUIPMENT' });\r\n\r\n                // 恢复玩家血量\r\n                setTimeout(() => {\r\n                    dispatch({ type: 'RESET_PLAYER_HEALTH' });\r\n                }, 1000);\r\n\r\n                // 生成新怪物\r\n                setTimeout(() => {\r\n                    dispatch({ type: 'RESET_MONSTER' });\r\n                }, 2000);\r\n\r\n                return;\r\n            }\r\n\r\n            // 玩家攻击\r\n            dispatch({ type: 'PLAYER_ATTACK' });\r\n\r\n            setTimeout(() => {\r\n                dispatch({ type: 'PLAYER_ATTACK_END' });\r\n\r\n                const isCritical = Math.random() < state.player.critChance;\r\n                let damage = calculateDamage(state.player, state.monster);\r\n\r\n                if (damage === 0) {\r\n                    dispatch({\r\n                        type: 'ADD_LOG',\r\n                        payload: {\r\n                            text: `${state.monster.name}闪避了${state.player.name}的攻击！`,\r\n                            isCritical: false\r\n                        }\r\n                    });\r\n                } else {\r\n                    if (isCritical) {\r\n                        damage = Math.floor(damage * state.player.critMultiplier);\r\n                    }\r\n\r\n                    dispatch({\r\n                        type: 'MONSTER_DAMAGE',\r\n                        payload: { damage, isCritical }\r\n                    });\r\n                }\r\n\r\n                setTimeout(() => {\r\n                    dispatch({ type: 'MONSTER_DAMAGE_END' });\r\n\r\n                    // 怪物攻击 (如果还活着)\r\n                    if (state.monster.currentHealth > 0) {\r\n                        setTimeout(() => {\r\n                            dispatch({ type: 'MONSTER_ATTACK' });\r\n\r\n                            setTimeout(() => {\r\n                                dispatch({ type: 'MONSTER_ATTACK_END' });\r\n\r\n                                const monsterCritical = Math.random() < state.monster.critChance;\r\n                                let monsterDamage = calculateDamage(state.monster, state.player);\r\n\r\n                                if (monsterDamage === 0) {\r\n                                    dispatch({\r\n                                        type: 'ADD_LOG',\r\n                                        payload: {\r\n                                            text: `${state.player.name}闪避了${state.monster.name}的攻击！`,\r\n                                            isCritical: false\r\n                                        }\r\n                                    });\r\n                                } else {\r\n                                    if (monsterCritical) {\r\n                                        monsterDamage = Math.floor(monsterDamage * state.monster.critMultiplier);\r\n                                    }\r\n\r\n                                    dispatch({\r\n                                        type: 'PLAYER_DAMAGE',\r\n                                        payload: { damage: monsterDamage, isCritical: monsterCritical }\r\n                                    });\r\n                                }\r\n\r\n                                setTimeout(() => {\r\n                                    dispatch({ type: 'PLAYER_DAMAGE_END' });\r\n                                }, 500);\r\n                            }, 500);\r\n                        }, 500);\r\n                    }\r\n                }, 500);\r\n            }, 500);\r\n\r\n        }, state.gameSpeed);\r\n\r\n        return () => clearInterval(gameLoop);\r\n    }, [state.gameScene, state.gameRunning, state.player, state.monster, state.selectedBattlefield]);\r\n\r\n    const value = {\r\n        state,\r\n        dispatch,\r\n        calculateExpToNextLevel,\r\n        equipmentTypes,\r\n        rarities\r\n    };\r\n\r\n    return (\r\n        <GameContext.Provider value={value}>\r\n            {children}\r\n        </GameContext.Provider>\r\n    );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}