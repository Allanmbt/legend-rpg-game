{"ast":null,"code":"var _jsxFileName = \"D:\\\\mm-rpg-react\\\\src\\\\contexts\\\\GameContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\n\n// 战场配置\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst battlefields = [{\n  id: 'novice',\n  name: '新手村',\n  levelRange: [1, 10],\n  background: '#e6f7ff',\n  description: '适合1-10级玩家的新手战场'\n}, {\n  id: 'intermediate',\n  name: '进阶森林',\n  levelRange: [11, 20],\n  background: '#e6ffe6',\n  description: '适合11-20级玩家的进阶战场'\n}, {\n  id: 'hell',\n  name: '地狱级难度',\n  levelRange: [21, 30],\n  background: '#ffe6e6',\n  description: '适合21-30级玩家的高难度战场'\n}];\n\n// 怪物配置（根据等级生成）\nconst generateMonster = (playerLevel, battlefieldId) => {\n  // 根据战场确定怪物等级范围\n  let minLevel = playerLevel - 2;\n  let maxLevel = playerLevel + 2;\n  const battlefield = battlefields.find(bf => bf.id === battlefieldId);\n\n  // 确保怪物等级在战场范围内\n  if (battlefield) {\n    minLevel = Math.max(minLevel, battlefield.levelRange[0]);\n    maxLevel = Math.min(maxLevel, battlefield.levelRange[1]);\n  }\n\n  // 随机确定怪物等级\n  const monsterLevel = Math.floor(Math.random() * (maxLevel - minLevel + 1)) + minLevel;\n\n  // 怪物类型\n  const monsterTypes = [{\n    name: '史莱姆',\n    emoji: '🟢',\n    baseHealth: 50,\n    baseAttack: 5,\n    baseDefense: 2\n  }, {\n    name: '蝙蝠',\n    emoji: '🦇',\n    baseHealth: 40,\n    baseAttack: 7,\n    baseDefense: 1\n  }, {\n    name: '骷髅',\n    emoji: '💀',\n    baseHealth: 60,\n    baseAttack: 6,\n    baseDefense: 3\n  }, {\n    name: '蜘蛛',\n    emoji: '🕷️',\n    baseHealth: 45,\n    baseAttack: 6,\n    baseDefense: 2\n  }, {\n    name: '幽灵',\n    emoji: '👻',\n    baseHealth: 55,\n    baseAttack: 8,\n    baseDefense: 0\n  }, {\n    name: '巨魔',\n    emoji: '👹',\n    baseHealth: 70,\n    baseAttack: 9,\n    baseDefense: 4\n  }, {\n    name: '恶魔',\n    emoji: '😈',\n    baseHealth: 65,\n    baseAttack: 10,\n    baseDefense: 3\n  }];\n\n  // 根据战场难度选择怪物\n  let availableMonsters;\n  if (battlefieldId === 'novice') {\n    availableMonsters = monsterTypes.slice(0, 3); // 简单怪物\n  } else if (battlefieldId === 'intermediate') {\n    availableMonsters = monsterTypes.slice(2, 5); // 中等怪物\n  } else {\n    availableMonsters = monsterTypes.slice(4); // 困难怪物\n  }\n\n  // 随机选择一种怪物\n  const monsterType = availableMonsters[Math.floor(Math.random() * availableMonsters.length)];\n\n  // 基于等级计算怪物属性\n  const levelMultiplier = 1 + (monsterLevel - 1) * 0.1; // 每级提升10%\n\n  return {\n    name: `${monsterLevel}级${monsterType.name}`,\n    emoji: monsterType.emoji,\n    level: monsterLevel,\n    maxHealth: Math.floor(monsterType.baseHealth * levelMultiplier),\n    currentHealth: Math.floor(monsterType.baseHealth * levelMultiplier),\n    attack: Math.floor(monsterType.baseAttack * levelMultiplier),\n    defense: Math.floor(monsterType.baseDefense * levelMultiplier),\n    critChance: 0.1 + monsterLevel * 0.005,\n    // 基础10%，每级+0.5%\n    critMultiplier: 1.5,\n    // 怪物经验值：基础值 + 等级加成\n    expReward: 10 + monsterLevel * 5\n  };\n};\n\n// 计算升级所需经验\nconst calculateExpToNextLevel = level => {\n  // 使用指数增长公式: 100 * (level)^1.5\n  return Math.floor(100 * Math.pow(level, 1.5));\n};\n\n// 初始状态\nconst createInitialState = () => {\n  // 尝试从localStorage读取保存的状态\n  const savedState = localStorage.getItem('rpgGameState');\n  if (savedState) {\n    try {\n      return JSON.parse(savedState);\n    } catch (e) {\n      console.error('Failed to parse saved game state:', e);\n    }\n  }\n\n  // 默认初始状态\n  return {\n    // 游戏场景状态: 'select' - 战场选择页面, 'battle' - 战斗页面\n    gameScene: 'select',\n    selectedBattlefield: null,\n    player: {\n      name: \"勇者\",\n      level: 1,\n      experience: 0,\n      expToNextLevel: calculateExpToNextLevel(1),\n      maxHealth: 100,\n      currentHealth: 100,\n      attack: 10,\n      defense: 5,\n      critChance: 0.3,\n      critMultiplier: 2\n    },\n    monster: null,\n    battleLogs: [],\n    playerAttacking: false,\n    monsterAttacking: false,\n    playerDamaged: false,\n    monsterDamaged: false,\n    gameSpeed: 2000,\n    // 每回合间隔(毫秒)\n    gameRunning: true,\n    battlefields: battlefields\n  };\n};\n\n// Reducer函数来处理状态更新\nfunction gameReducer(state, action) {\n  let newState;\n  switch (action.type) {\n    case 'SELECT_BATTLEFIELD':\n      newState = {\n        ...state,\n        gameScene: 'battle',\n        selectedBattlefield: action.payload,\n        battleLogs: [{\n          id: Date.now(),\n          text: `进入${action.payload.name}战场！`,\n          isCritical: false\n        }],\n        // 生成新怪物\n        monster: generateMonster(state.player.level, action.payload.id)\n      };\n      break;\n    case 'RETURN_TO_SELECT':\n      newState = {\n        ...state,\n        gameScene: 'select',\n        monster: null,\n        battleLogs: []\n      };\n      break;\n    case 'PLAYER_ATTACK':\n      newState = {\n        ...state,\n        playerAttacking: true\n      };\n      break;\n    case 'PLAYER_ATTACK_END':\n      newState = {\n        ...state,\n        playerAttacking: false\n      };\n      break;\n    case 'MONSTER_DAMAGE':\n      newState = {\n        ...state,\n        monsterDamaged: true,\n        monster: {\n          ...state.monster,\n          currentHealth: Math.max(0, state.monster.currentHealth - action.payload.damage)\n        },\n        battleLogs: [{\n          id: Date.now(),\n          text: action.payload.isCritical ? `暴击！${state.player.name}对${state.monster.name}造成了${action.payload.damage}点伤害！` : `${state.player.name}对${state.monster.name}造成了${action.payload.damage}点伤害。`,\n          isCritical: action.payload.isCritical\n        }, ...state.battleLogs.slice(0, 19)]\n      };\n      break;\n    case 'MONSTER_DAMAGE_END':\n      newState = {\n        ...state,\n        monsterDamaged: false\n      };\n      break;\n    case 'MONSTER_ATTACK':\n      newState = {\n        ...state,\n        monsterAttacking: true\n      };\n      break;\n    case 'MONSTER_ATTACK_END':\n      newState = {\n        ...state,\n        monsterAttacking: false\n      };\n      break;\n    case 'PLAYER_DAMAGE':\n      newState = {\n        ...state,\n        playerDamaged: true,\n        player: {\n          ...state.player,\n          currentHealth: Math.max(0, state.player.currentHealth - action.payload.damage)\n        },\n        battleLogs: [{\n          id: Date.now(),\n          text: action.payload.isCritical ? `暴击！${state.monster.name}对${state.player.name}造成了${action.payload.damage}点伤害！` : `${state.monster.name}对${state.player.name}造成了${action.payload.damage}点伤害。`,\n          isCritical: action.payload.isCritical\n        }, ...state.battleLogs.slice(0, 19)]\n      };\n      break;\n    case 'PLAYER_DAMAGE_END':\n      newState = {\n        ...state,\n        playerDamaged: false\n      };\n      break;\n    case 'ADD_LOG':\n      newState = {\n        ...state,\n        battleLogs: [{\n          id: Date.now(),\n          text: action.payload.text,\n          isCritical: action.payload.isCritical\n        }, ...state.battleLogs.slice(0, 19)]\n      };\n      break;\n    case 'PLAYER_GAIN_EXPERIENCE':\n      const expGained = action.payload.experience;\n      let updatedPlayer = {\n        ...state.player\n      };\n      updatedPlayer.experience += expGained;\n\n      // 检查是否升级\n      let leveledUp = false;\n      while (updatedPlayer.experience >= updatedPlayer.expToNextLevel) {\n        // 升级\n        updatedPlayer.level += 1;\n        updatedPlayer.experience -= updatedPlayer.expToNextLevel;\n        updatedPlayer.expToNextLevel = calculateExpToNextLevel(updatedPlayer.level);\n\n        // 属性提升\n        const healthIncrease = Math.floor(20 + updatedPlayer.level * 5);\n        updatedPlayer.maxHealth += healthIncrease;\n        updatedPlayer.currentHealth += healthIncrease;\n        updatedPlayer.attack += 2;\n        updatedPlayer.defense += 1;\n\n        // 每10级增加暴击率\n        if (updatedPlayer.level % 10 === 0) {\n          updatedPlayer.critChance += 0.05;\n        }\n        leveledUp = true;\n      }\n      const newLogs = leveledUp ? [{\n        id: Date.now(),\n        text: `获得${expGained}点经验！升级到${updatedPlayer.level}级！`,\n        isCritical: true\n      }, ...state.battleLogs] : [{\n        id: Date.now(),\n        text: `获得${expGained}点经验！`,\n        isCritical: false\n      }, ...state.battleLogs];\n      newState = {\n        ...state,\n        player: updatedPlayer,\n        battleLogs: newLogs.slice(0, 20)\n      };\n      break;\n    case 'RESET_MONSTER':\n      newState = {\n        ...state,\n        monster: generateMonster(state.player.level, state.selectedBattlefield.id),\n        battleLogs: [{\n          id: Date.now(),\n          text: \"新的怪物出现了！\",\n          isCritical: false\n        }, ...state.battleLogs.slice(0, 19)]\n      };\n      break;\n    case 'RESET_PLAYER_HEALTH':\n      newState = {\n        ...state,\n        player: {\n          ...state.player,\n          currentHealth: state.player.maxHealth\n        },\n        battleLogs: [{\n          id: Date.now(),\n          text: `${state.player.name}恢复了健康！`,\n          isCritical: false\n        }, ...state.battleLogs.slice(0, 19)]\n      };\n      break;\n    case 'TOGGLE_GAME':\n      newState = {\n        ...state,\n        gameRunning: !state.gameRunning\n      };\n      break;\n    default:\n      return state;\n  }\n\n  // 保存状态到localStorage\n  localStorage.setItem('rpgGameState', JSON.stringify(newState));\n  return newState;\n}\n\n// 创建Context\nconst GameContext = /*#__PURE__*/createContext();\n\n// 自定义钩子，方便组件使用Context\nexport function useGame() {\n  _s();\n  return useContext(GameContext);\n}\n\n// Provider组件\n_s(useGame, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function GameProvider({\n  children\n}) {\n  _s2();\n  const [state, dispatch] = useReducer(gameReducer, null, createInitialState);\n\n  // 战斗伤害计算\n  const calculateDamage = (attacker, defender) => {\n    let baseDamage = attacker.attack - defender.defense / 2;\n    baseDamage = Math.max(1, baseDamage); // 确保至少1点伤害\n\n    // 随机波动 (±20%)\n    const randomFactor = 0.8 + Math.random() * 0.4;\n    return Math.floor(baseDamage * randomFactor);\n  };\n\n  // 游戏主循环\n  useEffect(() => {\n    // 只在战斗场景且游戏正在运行时执行战斗循环\n    if (state.gameScene !== 'battle' || !state.gameRunning || !state.monster) return;\n    const gameLoop = setInterval(() => {\n      // 检查玩家是否死亡\n      if (state.player.currentHealth <= 0) {\n        dispatch({\n          type: 'ADD_LOG',\n          payload: {\n            text: `战斗失败！${state.player.name}被${state.monster.name}击败了！`,\n            isCritical: true\n          }\n        });\n\n        // 延迟后返回选择页面\n        setTimeout(() => {\n          dispatch({\n            type: 'RETURN_TO_SELECT'\n          });\n        }, 2000);\n        return;\n      }\n\n      // 检查怪物是否死亡\n      if (state.monster.currentHealth <= 0) {\n        dispatch({\n          type: 'ADD_LOG',\n          payload: {\n            text: `战斗胜利！${state.player.name}击败了${state.monster.name}！`,\n            isCritical: true\n          }\n        });\n\n        // 获得经验值\n        dispatch({\n          type: 'PLAYER_GAIN_EXPERIENCE',\n          payload: {\n            experience: state.monster.expReward\n          }\n        });\n\n        // 恢复玩家血量\n        setTimeout(() => {\n          dispatch({\n            type: 'RESET_PLAYER_HEALTH'\n          });\n        }, 1000);\n\n        // 生成新怪物\n        setTimeout(() => {\n          dispatch({\n            type: 'RESET_MONSTER'\n          });\n        }, 2000);\n        return;\n      }\n\n      // 玩家攻击\n      dispatch({\n        type: 'PLAYER_ATTACK'\n      });\n      setTimeout(() => {\n        dispatch({\n          type: 'PLAYER_ATTACK_END'\n        });\n        const isCritical = Math.random() < state.player.critChance;\n        let damage = calculateDamage(state.player, state.monster);\n        if (isCritical) {\n          damage = Math.floor(damage * state.player.critMultiplier);\n        }\n        dispatch({\n          type: 'MONSTER_DAMAGE',\n          payload: {\n            damage,\n            isCritical\n          }\n        });\n        setTimeout(() => {\n          dispatch({\n            type: 'MONSTER_DAMAGE_END'\n          });\n\n          // 怪物攻击 (如果还活着)\n          if (state.monster.currentHealth > 0) {\n            setTimeout(() => {\n              dispatch({\n                type: 'MONSTER_ATTACK'\n              });\n              setTimeout(() => {\n                dispatch({\n                  type: 'MONSTER_ATTACK_END'\n                });\n                const monsterCritical = Math.random() < state.monster.critChance;\n                let monsterDamage = calculateDamage(state.monster, state.player);\n                if (monsterCritical) {\n                  monsterDamage = Math.floor(monsterDamage * state.monster.critMultiplier);\n                }\n                dispatch({\n                  type: 'PLAYER_DAMAGE',\n                  payload: {\n                    damage: monsterDamage,\n                    isCritical: monsterCritical\n                  }\n                });\n                setTimeout(() => {\n                  dispatch({\n                    type: 'PLAYER_DAMAGE_END'\n                  });\n                }, 500);\n              }, 500);\n            }, 500);\n          }\n        }, 500);\n      }, 500);\n    }, state.gameSpeed);\n    return () => clearInterval(gameLoop);\n  }, [state.gameScene, state.gameRunning, state.player, state.monster, state.selectedBattlefield]);\n  const value = {\n    state,\n    dispatch,\n    calculateExpToNextLevel\n  };\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 490,\n    columnNumber: 9\n  }, this);\n}\n_s2(GameProvider, \"KbKDpRykewaxcxtso3VhbHZxRso=\");\n_c = GameProvider;\nvar _c;\n$RefreshReg$(_c, \"GameProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","jsxDEV","_jsxDEV","battlefields","id","name","levelRange","background","description","generateMonster","playerLevel","battlefieldId","minLevel","maxLevel","battlefield","find","bf","Math","max","min","monsterLevel","floor","random","monsterTypes","emoji","baseHealth","baseAttack","baseDefense","availableMonsters","slice","monsterType","length","levelMultiplier","level","maxHealth","currentHealth","attack","defense","critChance","critMultiplier","expReward","calculateExpToNextLevel","pow","createInitialState","savedState","localStorage","getItem","JSON","parse","e","console","error","gameScene","selectedBattlefield","player","experience","expToNextLevel","monster","battleLogs","playerAttacking","monsterAttacking","playerDamaged","monsterDamaged","gameSpeed","gameRunning","gameReducer","state","action","newState","type","payload","Date","now","text","isCritical","damage","expGained","updatedPlayer","leveledUp","healthIncrease","newLogs","setItem","stringify","GameContext","useGame","_s","GameProvider","children","_s2","dispatch","calculateDamage","attacker","defender","baseDamage","randomFactor","gameLoop","setInterval","setTimeout","monsterCritical","monsterDamage","clearInterval","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/mm-rpg-react/src/contexts/GameContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\r\n\r\n// 战场配置\r\nconst battlefields = [\r\n    {\r\n        id: 'novice',\r\n        name: '新手村',\r\n        levelRange: [1, 10],\r\n        background: '#e6f7ff',\r\n        description: '适合1-10级玩家的新手战场'\r\n    },\r\n    {\r\n        id: 'intermediate',\r\n        name: '进阶森林',\r\n        levelRange: [11, 20],\r\n        background: '#e6ffe6',\r\n        description: '适合11-20级玩家的进阶战场'\r\n    },\r\n    {\r\n        id: 'hell',\r\n        name: '地狱级难度',\r\n        levelRange: [21, 30],\r\n        background: '#ffe6e6',\r\n        description: '适合21-30级玩家的高难度战场'\r\n    }\r\n];\r\n\r\n// 怪物配置（根据等级生成）\r\nconst generateMonster = (playerLevel, battlefieldId) => {\r\n    // 根据战场确定怪物等级范围\r\n    let minLevel = playerLevel - 2;\r\n    let maxLevel = playerLevel + 2;\r\n    const battlefield = battlefields.find(bf => bf.id === battlefieldId);\r\n\r\n    // 确保怪物等级在战场范围内\r\n    if (battlefield) {\r\n        minLevel = Math.max(minLevel, battlefield.levelRange[0]);\r\n        maxLevel = Math.min(maxLevel, battlefield.levelRange[1]);\r\n    }\r\n\r\n    // 随机确定怪物等级\r\n    const monsterLevel = Math.floor(Math.random() * (maxLevel - minLevel + 1)) + minLevel;\r\n\r\n    // 怪物类型\r\n    const monsterTypes = [\r\n        { name: '史莱姆', emoji: '🟢', baseHealth: 50, baseAttack: 5, baseDefense: 2 },\r\n        { name: '蝙蝠', emoji: '🦇', baseHealth: 40, baseAttack: 7, baseDefense: 1 },\r\n        { name: '骷髅', emoji: '💀', baseHealth: 60, baseAttack: 6, baseDefense: 3 },\r\n        { name: '蜘蛛', emoji: '🕷️', baseHealth: 45, baseAttack: 6, baseDefense: 2 },\r\n        { name: '幽灵', emoji: '👻', baseHealth: 55, baseAttack: 8, baseDefense: 0 },\r\n        { name: '巨魔', emoji: '👹', baseHealth: 70, baseAttack: 9, baseDefense: 4 },\r\n        { name: '恶魔', emoji: '😈', baseHealth: 65, baseAttack: 10, baseDefense: 3 }\r\n    ];\r\n\r\n    // 根据战场难度选择怪物\r\n    let availableMonsters;\r\n    if (battlefieldId === 'novice') {\r\n        availableMonsters = monsterTypes.slice(0, 3); // 简单怪物\r\n    } else if (battlefieldId === 'intermediate') {\r\n        availableMonsters = monsterTypes.slice(2, 5); // 中等怪物\r\n    } else {\r\n        availableMonsters = monsterTypes.slice(4); // 困难怪物\r\n    }\r\n\r\n    // 随机选择一种怪物\r\n    const monsterType = availableMonsters[Math.floor(Math.random() * availableMonsters.length)];\r\n\r\n    // 基于等级计算怪物属性\r\n    const levelMultiplier = 1 + (monsterLevel - 1) * 0.1; // 每级提升10%\r\n\r\n    return {\r\n        name: `${monsterLevel}级${monsterType.name}`,\r\n        emoji: monsterType.emoji,\r\n        level: monsterLevel,\r\n        maxHealth: Math.floor(monsterType.baseHealth * levelMultiplier),\r\n        currentHealth: Math.floor(monsterType.baseHealth * levelMultiplier),\r\n        attack: Math.floor(monsterType.baseAttack * levelMultiplier),\r\n        defense: Math.floor(monsterType.baseDefense * levelMultiplier),\r\n        critChance: 0.1 + monsterLevel * 0.005, // 基础10%，每级+0.5%\r\n        critMultiplier: 1.5,\r\n        // 怪物经验值：基础值 + 等级加成\r\n        expReward: 10 + monsterLevel * 5\r\n    };\r\n};\r\n\r\n// 计算升级所需经验\r\nconst calculateExpToNextLevel = (level) => {\r\n    // 使用指数增长公式: 100 * (level)^1.5\r\n    return Math.floor(100 * Math.pow(level, 1.5));\r\n};\r\n\r\n// 初始状态\r\nconst createInitialState = () => {\r\n    // 尝试从localStorage读取保存的状态\r\n    const savedState = localStorage.getItem('rpgGameState');\r\n    if (savedState) {\r\n        try {\r\n            return JSON.parse(savedState);\r\n        } catch (e) {\r\n            console.error('Failed to parse saved game state:', e);\r\n        }\r\n    }\r\n\r\n    // 默认初始状态\r\n    return {\r\n        // 游戏场景状态: 'select' - 战场选择页面, 'battle' - 战斗页面\r\n        gameScene: 'select',\r\n        selectedBattlefield: null,\r\n\r\n        player: {\r\n            name: \"勇者\",\r\n            level: 1,\r\n            experience: 0,\r\n            expToNextLevel: calculateExpToNextLevel(1),\r\n            maxHealth: 100,\r\n            currentHealth: 100,\r\n            attack: 10,\r\n            defense: 5,\r\n            critChance: 0.3,\r\n            critMultiplier: 2\r\n        },\r\n\r\n        monster: null,\r\n\r\n        battleLogs: [],\r\n        playerAttacking: false,\r\n        monsterAttacking: false,\r\n        playerDamaged: false,\r\n        monsterDamaged: false,\r\n        gameSpeed: 2000, // 每回合间隔(毫秒)\r\n        gameRunning: true,\r\n        battlefields: battlefields\r\n    };\r\n};\r\n\r\n// Reducer函数来处理状态更新\r\nfunction gameReducer(state, action) {\r\n    let newState;\r\n\r\n    switch (action.type) {\r\n        case 'SELECT_BATTLEFIELD':\r\n            newState = {\r\n                ...state,\r\n                gameScene: 'battle',\r\n                selectedBattlefield: action.payload,\r\n                battleLogs: [{\r\n                    id: Date.now(),\r\n                    text: `进入${action.payload.name}战场！`,\r\n                    isCritical: false\r\n                }],\r\n                // 生成新怪物\r\n                monster: generateMonster(state.player.level, action.payload.id)\r\n            };\r\n            break;\r\n\r\n        case 'RETURN_TO_SELECT':\r\n            newState = {\r\n                ...state,\r\n                gameScene: 'select',\r\n                monster: null,\r\n                battleLogs: []\r\n            };\r\n            break;\r\n\r\n        case 'PLAYER_ATTACK':\r\n            newState = {\r\n                ...state,\r\n                playerAttacking: true\r\n            };\r\n            break;\r\n\r\n        case 'PLAYER_ATTACK_END':\r\n            newState = {\r\n                ...state,\r\n                playerAttacking: false\r\n            };\r\n            break;\r\n\r\n        case 'MONSTER_DAMAGE':\r\n            newState = {\r\n                ...state,\r\n                monsterDamaged: true,\r\n                monster: {\r\n                    ...state.monster,\r\n                    currentHealth: Math.max(0, state.monster.currentHealth - action.payload.damage)\r\n                },\r\n                battleLogs: [\r\n                    {\r\n                        id: Date.now(),\r\n                        text: action.payload.isCritical\r\n                            ? `暴击！${state.player.name}对${state.monster.name}造成了${action.payload.damage}点伤害！`\r\n                            : `${state.player.name}对${state.monster.name}造成了${action.payload.damage}点伤害。`,\r\n                        isCritical: action.payload.isCritical\r\n                    },\r\n                    ...state.battleLogs.slice(0, 19)\r\n                ]\r\n            };\r\n            break;\r\n\r\n        case 'MONSTER_DAMAGE_END':\r\n            newState = {\r\n                ...state,\r\n                monsterDamaged: false\r\n            };\r\n            break;\r\n\r\n        case 'MONSTER_ATTACK':\r\n            newState = {\r\n                ...state,\r\n                monsterAttacking: true\r\n            };\r\n            break;\r\n\r\n        case 'MONSTER_ATTACK_END':\r\n            newState = {\r\n                ...state,\r\n                monsterAttacking: false\r\n            };\r\n            break;\r\n\r\n        case 'PLAYER_DAMAGE':\r\n            newState = {\r\n                ...state,\r\n                playerDamaged: true,\r\n                player: {\r\n                    ...state.player,\r\n                    currentHealth: Math.max(0, state.player.currentHealth - action.payload.damage)\r\n                },\r\n                battleLogs: [\r\n                    {\r\n                        id: Date.now(),\r\n                        text: action.payload.isCritical\r\n                            ? `暴击！${state.monster.name}对${state.player.name}造成了${action.payload.damage}点伤害！`\r\n                            : `${state.monster.name}对${state.player.name}造成了${action.payload.damage}点伤害。`,\r\n                        isCritical: action.payload.isCritical\r\n                    },\r\n                    ...state.battleLogs.slice(0, 19)\r\n                ]\r\n            };\r\n            break;\r\n\r\n        case 'PLAYER_DAMAGE_END':\r\n            newState = {\r\n                ...state,\r\n                playerDamaged: false\r\n            };\r\n            break;\r\n\r\n        case 'ADD_LOG':\r\n            newState = {\r\n                ...state,\r\n                battleLogs: [\r\n                    { id: Date.now(), text: action.payload.text, isCritical: action.payload.isCritical },\r\n                    ...state.battleLogs.slice(0, 19)\r\n                ]\r\n            };\r\n            break;\r\n\r\n        case 'PLAYER_GAIN_EXPERIENCE':\r\n            const expGained = action.payload.experience;\r\n            let updatedPlayer = { ...state.player };\r\n            updatedPlayer.experience += expGained;\r\n\r\n            // 检查是否升级\r\n            let leveledUp = false;\r\n            while (updatedPlayer.experience >= updatedPlayer.expToNextLevel) {\r\n                // 升级\r\n                updatedPlayer.level += 1;\r\n                updatedPlayer.experience -= updatedPlayer.expToNextLevel;\r\n                updatedPlayer.expToNextLevel = calculateExpToNextLevel(updatedPlayer.level);\r\n\r\n                // 属性提升\r\n                const healthIncrease = Math.floor(20 + updatedPlayer.level * 5);\r\n                updatedPlayer.maxHealth += healthIncrease;\r\n                updatedPlayer.currentHealth += healthIncrease;\r\n                updatedPlayer.attack += 2;\r\n                updatedPlayer.defense += 1;\r\n\r\n                // 每10级增加暴击率\r\n                if (updatedPlayer.level % 10 === 0) {\r\n                    updatedPlayer.critChance += 0.05;\r\n                }\r\n\r\n                leveledUp = true;\r\n            }\r\n\r\n            const newLogs = leveledUp\r\n                ? [\r\n                    {\r\n                        id: Date.now(),\r\n                        text: `获得${expGained}点经验！升级到${updatedPlayer.level}级！`,\r\n                        isCritical: true\r\n                    },\r\n                    ...state.battleLogs\r\n                ]\r\n                : [\r\n                    {\r\n                        id: Date.now(),\r\n                        text: `获得${expGained}点经验！`,\r\n                        isCritical: false\r\n                    },\r\n                    ...state.battleLogs\r\n                ];\r\n\r\n            newState = {\r\n                ...state,\r\n                player: updatedPlayer,\r\n                battleLogs: newLogs.slice(0, 20)\r\n            };\r\n            break;\r\n\r\n        case 'RESET_MONSTER':\r\n            newState = {\r\n                ...state,\r\n                monster: generateMonster(state.player.level, state.selectedBattlefield.id),\r\n                battleLogs: [\r\n                    { id: Date.now(), text: \"新的怪物出现了！\", isCritical: false },\r\n                    ...state.battleLogs.slice(0, 19)\r\n                ]\r\n            };\r\n            break;\r\n\r\n        case 'RESET_PLAYER_HEALTH':\r\n            newState = {\r\n                ...state,\r\n                player: {\r\n                    ...state.player,\r\n                    currentHealth: state.player.maxHealth\r\n                },\r\n                battleLogs: [\r\n                    { id: Date.now(), text: `${state.player.name}恢复了健康！`, isCritical: false },\r\n                    ...state.battleLogs.slice(0, 19)\r\n                ]\r\n            };\r\n            break;\r\n\r\n        case 'TOGGLE_GAME':\r\n            newState = {\r\n                ...state,\r\n                gameRunning: !state.gameRunning\r\n            };\r\n            break;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n\r\n    // 保存状态到localStorage\r\n    localStorage.setItem('rpgGameState', JSON.stringify(newState));\r\n    return newState;\r\n}\r\n\r\n// 创建Context\r\nconst GameContext = createContext();\r\n\r\n// 自定义钩子，方便组件使用Context\r\nexport function useGame() {\r\n    return useContext(GameContext);\r\n}\r\n\r\n// Provider组件\r\nexport function GameProvider({ children }) {\r\n    const [state, dispatch] = useReducer(gameReducer, null, createInitialState);\r\n\r\n    // 战斗伤害计算\r\n    const calculateDamage = (attacker, defender) => {\r\n        let baseDamage = attacker.attack - defender.defense / 2;\r\n        baseDamage = Math.max(1, baseDamage); // 确保至少1点伤害\r\n\r\n        // 随机波动 (±20%)\r\n        const randomFactor = 0.8 + Math.random() * 0.4;\r\n        return Math.floor(baseDamage * randomFactor);\r\n    };\r\n\r\n    // 游戏主循环\r\n    useEffect(() => {\r\n        // 只在战斗场景且游戏正在运行时执行战斗循环\r\n        if (state.gameScene !== 'battle' || !state.gameRunning || !state.monster) return;\r\n\r\n        const gameLoop = setInterval(() => {\r\n            // 检查玩家是否死亡\r\n            if (state.player.currentHealth <= 0) {\r\n                dispatch({\r\n                    type: 'ADD_LOG',\r\n                    payload: {\r\n                        text: `战斗失败！${state.player.name}被${state.monster.name}击败了！`,\r\n                        isCritical: true\r\n                    }\r\n                });\r\n\r\n                // 延迟后返回选择页面\r\n                setTimeout(() => {\r\n                    dispatch({ type: 'RETURN_TO_SELECT' });\r\n                }, 2000);\r\n\r\n                return;\r\n            }\r\n\r\n            // 检查怪物是否死亡\r\n            if (state.monster.currentHealth <= 0) {\r\n                dispatch({\r\n                    type: 'ADD_LOG',\r\n                    payload: {\r\n                        text: `战斗胜利！${state.player.name}击败了${state.monster.name}！`,\r\n                        isCritical: true\r\n                    }\r\n                });\r\n\r\n                // 获得经验值\r\n                dispatch({\r\n                    type: 'PLAYER_GAIN_EXPERIENCE',\r\n                    payload: { experience: state.monster.expReward }\r\n                });\r\n\r\n                // 恢复玩家血量\r\n                setTimeout(() => {\r\n                    dispatch({ type: 'RESET_PLAYER_HEALTH' });\r\n                }, 1000);\r\n\r\n                // 生成新怪物\r\n                setTimeout(() => {\r\n                    dispatch({ type: 'RESET_MONSTER' });\r\n                }, 2000);\r\n\r\n                return;\r\n            }\r\n\r\n            // 玩家攻击\r\n            dispatch({ type: 'PLAYER_ATTACK' });\r\n\r\n            setTimeout(() => {\r\n                dispatch({ type: 'PLAYER_ATTACK_END' });\r\n\r\n                const isCritical = Math.random() < state.player.critChance;\r\n                let damage = calculateDamage(state.player, state.monster);\r\n\r\n                if (isCritical) {\r\n                    damage = Math.floor(damage * state.player.critMultiplier);\r\n                }\r\n\r\n                dispatch({\r\n                    type: 'MONSTER_DAMAGE',\r\n                    payload: { damage, isCritical }\r\n                });\r\n\r\n                setTimeout(() => {\r\n                    dispatch({ type: 'MONSTER_DAMAGE_END' });\r\n\r\n                    // 怪物攻击 (如果还活着)\r\n                    if (state.monster.currentHealth > 0) {\r\n                        setTimeout(() => {\r\n                            dispatch({ type: 'MONSTER_ATTACK' });\r\n\r\n                            setTimeout(() => {\r\n                                dispatch({ type: 'MONSTER_ATTACK_END' });\r\n\r\n                                const monsterCritical = Math.random() < state.monster.critChance;\r\n                                let monsterDamage = calculateDamage(state.monster, state.player);\r\n\r\n                                if (monsterCritical) {\r\n                                    monsterDamage = Math.floor(monsterDamage * state.monster.critMultiplier);\r\n                                }\r\n\r\n                                dispatch({\r\n                                    type: 'PLAYER_DAMAGE',\r\n                                    payload: { damage: monsterDamage, isCritical: monsterCritical }\r\n                                });\r\n\r\n                                setTimeout(() => {\r\n                                    dispatch({ type: 'PLAYER_DAMAGE_END' });\r\n                                }, 500);\r\n                            }, 500);\r\n                        }, 500);\r\n                    }\r\n                }, 500);\r\n            }, 500);\r\n\r\n        }, state.gameSpeed);\r\n\r\n        return () => clearInterval(gameLoop);\r\n    }, [state.gameScene, state.gameRunning, state.player, state.monster, state.selectedBattlefield]);\r\n\r\n    const value = {\r\n        state,\r\n        dispatch,\r\n        calculateExpToNextLevel\r\n    };\r\n\r\n    return (\r\n        <GameContext.Provider value={value}>\r\n            {children}\r\n        </GameContext.Provider>\r\n    );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}