{"ast":null,"code":"import React,{createContext,useContext,useReducer,useEffect}from'react';// 战场配置\nimport{jsx as _jsx}from\"react/jsx-runtime\";const battlefields=[{id:'novice',name:'新手村',levelRange:[1,10],background:'#e6f7ff',description:'适合1-10级玩家的新手战场'},{id:'intermediate',name:'进阶森林',levelRange:[11,20],background:'#e6ffe6',description:'适合11-20级玩家的进阶战场'},{id:'hell',name:'地狱级难度',levelRange:[21,30],background:'#ffe6e6',description:'适合21-30级玩家的高难度战场'}];// 装备类型定义\nconst equipmentTypes={HEAD:{id:'HEAD',name:'头部',emoji:'🧢',slot:'head'},BODY:{id:'BODY',name:'身体',emoji:'👕',slot:'body'},BELT:{id:'BELT',name:'腰带',emoji:'🧶',slot:'belt'},SHOES:{id:'SHOES',name:'鞋子',emoji:'👞',slot:'shoes'},WEAPON:{id:'WEAPON',name:'武器',emoji:'🗡️',slot:'weapon'},NECKLACE:{id:'NECKLACE',name:'项链',emoji:'📿',slot:'necklace'},ACCESSORY:{id:'ACCESSORY',name:'首饰',emoji:'💍',slot:'accessory'}};// 装备稀有度定义\nconst rarities={COMMON:{id:'COMMON',name:'普通',color:'#a0a0a0',chance:0.6,multiplier:1},UNCOMMON:{id:'UNCOMMON',name:'优秀',color:'#1eff00',chance:0.3,multiplier:1.5},RARE:{id:'RARE',name:'精良',color:'#0070dd',chance:0.08,multiplier:2},EPIC:{id:'EPIC',name:'史诗',color:'#a335ee',chance:0.02,multiplier:2.5},LEGENDARY:{id:'LEGENDARY',name:'传说',color:'#ff8000',chance:0.004,multiplier:3}};// 装备属性定义\nconst attributeTypes={HEALTH:{id:'HEALTH',name:'生命值',min:5,max:20,scaling:2},ATTACK:{id:'ATTACK',name:'攻击力',min:1,max:5,scaling:0.5},DEFENSE:{id:'DEFENSE',name:'防御力',min:1,max:3,scaling:0.3},AGILITY:{id:'AGILITY',name:'敏捷度',min:1,max:3,scaling:0.3},CRIT_CHANCE:{id:'CRIT_CHANCE',name:'暴击率',min:0.01,max:0.03,scaling:0.003}};// 按装备类型划分可能的属性 (某些属性只在特定装备上出现)\nconst equipmentAttributes={HEAD:['HEALTH','DEFENSE'],BODY:['HEALTH','DEFENSE'],BELT:['HEALTH','AGILITY'],SHOES:['AGILITY','DEFENSE'],WEAPON:['ATTACK','CRIT_CHANCE'],NECKLACE:['HEALTH','CRIT_CHANCE'],ACCESSORY:['ATTACK','AGILITY','CRIT_CHANCE']};// 随机生成装备\nconst generateEquipment=function(playerLevel){let dropRateBonus=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;// 装备等级范围\nconst equipLevel=Math.max(1,Math.floor(playerLevel*(0.8+Math.random()*0.4)));// 随机装备类型\nconst equipTypeKeys=Object.keys(equipmentTypes);const randomType=equipmentTypes[equipTypeKeys[Math.floor(Math.random()*equipTypeKeys.length)]];// 随机稀有度 (使用概率权重)\nlet rarityRoll=Math.random()-dropRateBonus;// 掉落率加成提高稀有度概率\nrarityRoll=Math.max(0,rarityRoll);// 确保不会是负数\nlet selectedRarity;if(rarityRoll<rarities.LEGENDARY.chance){selectedRarity=rarities.LEGENDARY;}else if(rarityRoll<rarities.EPIC.chance+rarities.LEGENDARY.chance){selectedRarity=rarities.EPIC;}else if(rarityRoll<rarities.RARE.chance+rarities.EPIC.chance+rarities.LEGENDARY.chance){selectedRarity=rarities.RARE;}else if(rarityRoll<rarities.UNCOMMON.chance+rarities.RARE.chance+rarities.EPIC.chance+rarities.LEGENDARY.chance){selectedRarity=rarities.UNCOMMON;}else{selectedRarity=rarities.COMMON;}// 确定属性数量 (基于稀有度)\nconst attrCount=Math.floor(Math.random()*2)+1;// 1-2个属性\n// 随机选择属性\nconst possibleAttributes=equipmentAttributes[randomType.id];const shuffledAttributes=[...possibleAttributes].sort(()=>0.5-Math.random());const selectedAttributes=shuffledAttributes.slice(0,attrCount);// 为每个属性随机生成数值\nconst attributes={};selectedAttributes.forEach(attrKey=>{const attr=attributeTypes[attrKey];// 基础属性值 + 等级缩放 * 稀有度倍率\nconst baseValue=attr.min+Math.random()*(attr.max-attr.min);const levelScaling=attr.scaling*equipLevel;let value=(baseValue+levelScaling)*selectedRarity.multiplier;// 对暴击率进行特殊处理，确保不超过合理范围\nif(attrKey==='CRIT_CHANCE'){value=Math.min(value,0.25);// 最高25%暴击率\nvalue=Math.round(value*1000)/1000;// 保留3位小数\n}else{value=Math.floor(value);// 其他属性取整\n}attributes[attrKey]=value;});// 生成装备名称\nconst prefixes=['锋利的','坚固的','闪亮的','破旧的','神秘的','古老的','强化的','精制的','魔法的','传承的'];const randomPrefix=prefixes[Math.floor(Math.random()*prefixes.length)];const name=`${randomPrefix} ${randomType.name}`;// 生成唯一ID\nconst id=`equip_${Date.now()}_${Math.floor(Math.random()*1000)}`;return{id,name,type:randomType.id,emoji:randomType.emoji,slot:randomType.slot,level:equipLevel,rarity:selectedRarity.id,rarityName:selectedRarity.name,rarityColor:selectedRarity.color,attributes};};// 怪物配置（根据等级生成）\nconst generateMonster=(playerLevel,battlefieldId)=>{// 根据战场确定怪物等级范围\nlet minLevel=playerLevel-2;let maxLevel=playerLevel+2;const battlefield=battlefields.find(bf=>bf.id===battlefieldId);// 确保怪物等级在战场范围内\nif(battlefield){minLevel=Math.max(minLevel,battlefield.levelRange[0]);maxLevel=Math.min(maxLevel,battlefield.levelRange[1]);}// 随机确定怪物等级\nconst monsterLevel=Math.floor(Math.random()*(maxLevel-minLevel+1))+minLevel;// 怪物类型\nconst monsterTypes=[{name:'史莱姆',emoji:'🟢',baseHealth:50,baseAttack:5,baseDefense:2,baseAgility:1},{name:'蝙蝠',emoji:'🦇',baseHealth:40,baseAttack:7,baseDefense:1,baseAgility:5},{name:'骷髅',emoji:'💀',baseHealth:60,baseAttack:6,baseDefense:3,baseAgility:2},{name:'蜘蛛',emoji:'🕷️',baseHealth:45,baseAttack:6,baseDefense:2,baseAgility:4},{name:'幽灵',emoji:'👻',baseHealth:55,baseAttack:8,baseDefense:0,baseAgility:6},{name:'巨魔',emoji:'👹',baseHealth:70,baseAttack:9,baseDefense:4,baseAgility:1},{name:'恶魔',emoji:'😈',baseHealth:65,baseAttack:10,baseDefense:3,baseAgility:3}];// 根据战场难度选择怪物\nlet availableMonsters;if(battlefieldId==='novice'){availableMonsters=monsterTypes.slice(0,3);// 简单怪物\n}else if(battlefieldId==='intermediate'){availableMonsters=monsterTypes.slice(2,5);// 中等怪物\n}else{availableMonsters=monsterTypes.slice(4);// 困难怪物\n}// 随机选择一种怪物\nconst monsterType=availableMonsters[Math.floor(Math.random()*availableMonsters.length)];// 基于等级计算怪物属性\nconst levelMultiplier=1+(monsterLevel-1)*0.1;// 每级提升10%\nreturn{name:`${monsterLevel}级${monsterType.name}`,emoji:monsterType.emoji,level:monsterLevel,maxHealth:Math.floor(monsterType.baseHealth*levelMultiplier),currentHealth:Math.floor(monsterType.baseHealth*levelMultiplier),attack:Math.floor(monsterType.baseAttack*levelMultiplier),defense:Math.floor(monsterType.baseDefense*levelMultiplier),agility:Math.floor(monsterType.baseAgility*levelMultiplier),critChance:0.1+monsterLevel*0.005,// 基础10%，每级+0.5%\ncritMultiplier:1.5,// 怪物经验值：基础值 + 等级加成\nexpReward:10+monsterLevel*5,// 掉落装备概率 (20% + 等级加成)\ndropChance:0.2+monsterLevel*0.01};};// 计算升级所需经验\nconst calculateExpToNextLevel=level=>{// 使用指数增长公式: 100 * (level)^1.5\nreturn Math.floor(100*Math.pow(level,1.5));};// 计算装备提供的属性总和\nconst calculateEquipmentStats=equipment=>{const stats={health:0,attack:0,defense:0,agility:0,critChance:0};// 遍历所有装备槽位\nObject.values(equipment).forEach(equip=>{if(!equip)return;// 如果槽位没有装备\n// 累加装备属性\nObject.entries(equip.attributes).forEach(_ref=>{let[key,value]=_ref;switch(key){case'HEALTH':stats.health+=value;break;case'ATTACK':stats.attack+=value;break;case'DEFENSE':stats.defense+=value;break;case'AGILITY':stats.agility+=value;break;case'CRIT_CHANCE':stats.critChance+=value;break;default:break;}});});return stats;};// 初始状态\n// 初始状态\nconst createInitialState=()=>{try{// 尝试从localStorage读取保存的状态\nconst savedState=localStorage.getItem('rpgGameState');if(savedState){const parsedState=JSON.parse(savedState);// 检查并确保所有关键属性都存在，如果不存在则使用默认值\n// 确保inventory存在\nif(!parsedState.inventory){parsedState.inventory={maxSlots:20,items:[]};}// 确保modal存在\nif(!parsedState.modal){parsedState.modal={isOpen:false,type:null,data:null};}// 确保equipment存在\nif(!parsedState.equipment){parsedState.equipment={head:null,body:null,belt:null,shoes:null,weapon:null,necklace:null,accessory:null};}return parsedState;}}catch(e){console.error('Failed to parse saved game state:',e);}// 默认初始状态\nreturn{// 游戏场景状态: 'select' - 战场选择页面, 'battle' - 战斗页面\ngameScene:'select',selectedBattlefield:null,// 角色基础属性\nplayer:{name:\"勇者\",level:1,experience:0,expToNextLevel:calculateExpToNextLevel(1),maxHealth:100,currentHealth:100,attack:10,defense:5,agility:3,// 新增敏捷度属性\ncritChance:0.1,critMultiplier:1.5},// 装备系统\nequipment:{head:null,body:null,belt:null,shoes:null,weapon:null,necklace:null,accessory:null},// 物品栏\ninventory:{maxSlots:20,// 物品栏最大格子数\nitems:[]// 物品列表，每个物品包含 {id, count, ...itemData}\n},// 模态窗口状态\nmodal:{isOpen:false,type:null,// 'character', 'equipment', 'inventory'\ndata:null},// 物品右键菜单状态\ncontextMenu:{isOpen:false,position:{x:0,y:0},item:null},monster:null,battleLogs:[],playerAttacking:false,monsterAttacking:false,playerDamaged:false,monsterDamaged:false,gameSpeed:2000,// 每回合间隔(毫秒)\ngameRunning:true,battlefields:battlefields};};// Reducer函数来处理状态更新\nfunction gameReducer(state,action){let newState;switch(action.type){// 选择战场\ncase'SELECT_BATTLEFIELD':newState={...state,gameScene:'battle',selectedBattlefield:action.payload,battleLogs:[{id:Date.now(),text:`进入${action.payload.name}战场！`,isCritical:false}],// 生成新怪物\nmonster:generateMonster(state.player.level,action.payload.id)};break;// 返回选择页面\ncase'RETURN_TO_SELECT':newState={...state,gameScene:'select',monster:null,battleLogs:[]};break;// 打开模态窗口\ncase'OPEN_MODAL':newState={...state,modal:{isOpen:true,type:action.payload.type,data:action.payload.data||null}};break;// 关闭模态窗口\ncase'CLOSE_MODAL':newState={...state,modal:{...state.modal,isOpen:false}};break;// 打开右键菜单\ncase'OPEN_CONTEXT_MENU':newState={...state,contextMenu:{isOpen:true,position:action.payload.position,item:action.payload.item}};break;// 关闭右键菜单\ncase'CLOSE_CONTEXT_MENU':newState={...state,contextMenu:{...state.contextMenu,isOpen:false}};break;// 装备物品\ncase'EQUIP_ITEM':{const item=action.payload;const{slot}=item;// 检查是否已经有装备在该槽位\nconst existingEquipment=state.equipment[slot];let newInventory={...state.inventory};// 从物品栏移除要装备的物品\nnewInventory.items=newInventory.items.filter(invItem=>{if(invItem.id===item.id){if(invItem.count>1){invItem.count--;return true;}return false;}return true;});// 如果槽位已有装备，将其放回物品栏\nif(existingEquipment){// 检查物品栏是否已有相同物品\nconst existingInvItem=newInventory.items.find(i=>i.id===existingEquipment.id||i.name===existingEquipment.name&&i.level===existingEquipment.level);if(existingInvItem){existingInvItem.count++;}else{// 检查物品栏是否已满\nif(newInventory.items.length<newInventory.maxSlots){newInventory.items.push({...existingEquipment,count:1});}else{// 如果满了，添加提示\nnewState={...state,battleLogs:[{id:Date.now(),text:`物品栏已满，无法卸下${existingEquipment.name}！`,isCritical:true},...state.battleLogs.slice(0,19)]};break;}}}// 创建新的装备状态\nconst newEquipment={...state.equipment,[slot]:{...item,count:1}};// 获取新的装备加成\nconst equipStats=calculateEquipmentStats(newEquipment);// 更新玩家属性（基础属性+装备加成）\nconst basePlayer={...state.player};const updatedPlayer={...basePlayer,maxHealth:basePlayer.maxHealth+equipStats.health,currentHealth:Math.min(basePlayer.currentHealth+equipStats.health,basePlayer.maxHealth+equipStats.health),attack:basePlayer.attack+equipStats.attack,defense:basePlayer.defense+equipStats.defense,agility:basePlayer.agility+equipStats.agility,critChance:basePlayer.critChance+equipStats.critChance};newState={...state,equipment:newEquipment,inventory:newInventory,player:updatedPlayer,battleLogs:[{id:Date.now(),text:`装备了${item.name}！`,isCritical:false},...state.battleLogs.slice(0,19)]};}break;// 卸下装备\ncase'UNEQUIP_ITEM':{const slot=action.payload;const item=state.equipment[slot];if(!item){newState=state;break;}// 检查物品栏是否已满\nif(state.inventory.items.length>=state.inventory.maxSlots){newState={...state,battleLogs:[{id:Date.now(),text:`物品栏已满，无法卸下${item.name}！`,isCritical:true},...state.battleLogs.slice(0,19)]};break;}// 检查物品栏是否已有相同物品\nlet newInventory={...state.inventory};const existingItem=newInventory.items.find(i=>i.id===item.id||i.name===item.name&&i.level===item.level);if(existingItem){existingItem.count++;}else{newInventory.items.push({...item,count:1});}// 创建新的装备状态\nconst newEquipment={...state.equipment,[slot]:null};// 获取新的装备加成\nconst equipStats=calculateEquipmentStats(newEquipment);// 更新玩家属性（基础属性+装备加成）\nconst basePlayer={...state.player};const updatedPlayer={...basePlayer,maxHealth:basePlayer.maxHealth-equipStats.health,currentHealth:Math.min(basePlayer.currentHealth,basePlayer.maxHealth-equipStats.health),attack:basePlayer.attack-equipStats.attack,defense:basePlayer.defense-equipStats.defense,agility:basePlayer.agility-equipStats.agility,critChance:basePlayer.critChance-equipStats.critChance};newState={...state,equipment:newEquipment,inventory:newInventory,player:updatedPlayer,battleLogs:[{id:Date.now(),text:`卸下了${item.name}！`,isCritical:false},...state.battleLogs.slice(0,19)]};}break;// 丢弃物品\ncase'DISCARD_ITEM':{const item=action.payload;// 从物品栏移除物品\nconst newInventory={...state.inventory};newInventory.items=newInventory.items.filter(invItem=>invItem.id!==item.id);newState={...state,inventory:newInventory,battleLogs:[{id:Date.now(),text:`丢弃了${item.name} x${item.count}！`,isCritical:false},...state.battleLogs.slice(0,19)]};}break;// 获得物品\ncase'GAIN_ITEM':{const item=action.payload;// 检查物品栏是否已满\nif(state.inventory.items.length>=state.inventory.maxSlots){// 物品栏已满，无法获得物品\nnewState={...state,battleLogs:[{id:Date.now(),text:`物品栏已满，无法获得${item.name}！`,isCritical:true},...state.battleLogs.slice(0,19)]};break;}// 检查物品栏是否已有相同物品\nconst newInventory={...state.inventory};const existingItem=newInventory.items.find(i=>i.id===item.id||i.name===item.name&&i.level===item.level&&i.rarity===item.rarity);if(existingItem){// 如果已有相同物品，增加数量\nexistingItem.count++;}else{// 否则添加新物品\nnewInventory.items.push({...item,count:1});}newState={...state,inventory:newInventory,battleLogs:[{id:Date.now(),text:`获得了${item.name}！`,isCritical:false},...state.battleLogs.slice(0,19)]};}break;// 玩家攻击\ncase'PLAYER_ATTACK':newState={...state,playerAttacking:true};break;// 玩家攻击结束\ncase'PLAYER_ATTACK_END':newState={...state,playerAttacking:false};break;// 怪物受伤\ncase'MONSTER_DAMAGE':newState={...state,monsterDamaged:true,monster:{...state.monster,currentHealth:Math.max(0,state.monster.currentHealth-action.payload.damage)},battleLogs:[{id:Date.now(),text:action.payload.isCritical?`暴击！${state.player.name}对${state.monster.name}造成了${action.payload.damage}点伤害！`:`${state.player.name}对${state.monster.name}造成了${action.payload.damage}点伤害。`,isCritical:action.payload.isCritical},...state.battleLogs.slice(0,19)]};break;// 怪物受伤结束\ncase'MONSTER_DAMAGE_END':newState={...state,monsterDamaged:false};break;// 怪物攻击\ncase'MONSTER_ATTACK':newState={...state,monsterAttacking:true};break;// 怪物攻击结束\ncase'MONSTER_ATTACK_END':newState={...state,monsterAttacking:false};break;// 玩家受伤\ncase'PLAYER_DAMAGE':newState={...state,playerDamaged:true,player:{...state.player,currentHealth:Math.max(0,state.player.currentHealth-action.payload.damage)},battleLogs:[{id:Date.now(),text:action.payload.isCritical?`暴击！${state.monster.name}对${state.player.name}造成了${action.payload.damage}点伤害！`:`${state.monster.name}对${state.player.name}造成了${action.payload.damage}点伤害。`,isCritical:action.payload.isCritical},...state.battleLogs.slice(0,19)]};break;// 玩家受伤结束\ncase'PLAYER_DAMAGE_END':newState={...state,playerDamaged:false};break;// 添加日志\ncase'ADD_LOG':newState={...state,battleLogs:[{id:Date.now(),text:action.payload.text,isCritical:action.payload.isCritical},...state.battleLogs.slice(0,19)]};break;// 玩家获得经验\ncase'PLAYER_GAIN_EXPERIENCE':{const expGained=action.payload.experience;let updatedPlayer={...state.player};updatedPlayer.experience+=expGained;// 检查是否升级\nlet leveledUp=false;while(updatedPlayer.experience>=updatedPlayer.expToNextLevel){// 升级\nupdatedPlayer.level+=1;updatedPlayer.experience-=updatedPlayer.expToNextLevel;updatedPlayer.expToNextLevel=calculateExpToNextLevel(updatedPlayer.level);// 属性提升\nconst healthIncrease=Math.floor(20+updatedPlayer.level*5);updatedPlayer.maxHealth+=healthIncrease;updatedPlayer.currentHealth+=healthIncrease;updatedPlayer.attack+=2;updatedPlayer.defense+=1;updatedPlayer.agility+=1;// 每10级增加暴击率\nif(updatedPlayer.level%10===0){updatedPlayer.critChance+=0.05;}leveledUp=true;}const newLogs=leveledUp?[{id:Date.now(),text:`获得${expGained}点经验！升级到${updatedPlayer.level}级！`,isCritical:true},...state.battleLogs]:[{id:Date.now(),text:`获得${expGained}点经验！`,isCritical:false},...state.battleLogs];newState={...state,player:updatedPlayer,battleLogs:newLogs.slice(0,20)};}break;// 掉落装备\ncase'DROP_EQUIPMENT':{// 检查是否掉落装备\nconst monster=state.monster;const randomRoll=Math.random();if(randomRoll<=monster.dropChance){// 生成装备\nconst equipment=generateEquipment(monster.level);// 检查物品栏是否已满\nif(state.inventory.items.length>=state.inventory.maxSlots){// 物品栏已满，无法获得装备\nnewState={...state,battleLogs:[{id:Date.now(),text:`怪物掉落了${equipment.rarityName}品质的${equipment.name}，但物品栏已满，无法拾取！`,isCritical:true},...state.battleLogs.slice(0,19)]};break;}// 添加装备到物品栏\nconst newInventory={...state.inventory};newInventory.items.push({...equipment,count:1});newState={...state,inventory:newInventory,battleLogs:[{id:Date.now(),text:`怪物掉落了${equipment.rarityName}品质的${equipment.name}！`,isCritical:true},...state.battleLogs.slice(0,19)]};}else{// 没有掉落装备\nnewState=state;}}break;// 重置怪物\ncase'RESET_MONSTER':newState={...state,monster:generateMonster(state.player.level,state.selectedBattlefield.id),battleLogs:[{id:Date.now(),text:\"新的怪物出现了！\",isCritical:false},...state.battleLogs.slice(0,19)]};break;// 恢复玩家生命值\ncase'RESET_PLAYER_HEALTH':newState={...state,player:{...state.player,currentHealth:state.player.maxHealth},battleLogs:[{id:Date.now(),text:`${state.player.name}恢复了健康！`,isCritical:false},...state.battleLogs.slice(0,19)]};break;// 切换游戏运行状态\ncase'TOGGLE_GAME':newState={...state,gameRunning:!state.gameRunning};break;default:return state;}// 保存状态到localStorage\nlocalStorage.setItem('rpgGameState',JSON.stringify(newState));return newState;}// 创建Context\nconst GameContext=/*#__PURE__*/createContext();// 自定义钩子，方便组件使用Context\nexport function useGame(){return useContext(GameContext);}// Provider组件\nexport function GameProvider(_ref2){let{children}=_ref2;const[state,dispatch]=useReducer(gameReducer,null,createInitialState);// 战斗伤害计算\nconst calculateDamage=(attacker,defender)=>{// 基础伤害 = 攻击力 - 防御力/2\nlet baseDamage=Math.max(1,attacker.attack-defender.defense/2);// 敏捷影响命中和闪避\nconst agilityDiff=attacker.agility-defender.agility;// 命中率调整 (加成或减少最多20%)\nconst hitRateAdjustment=Math.min(0.2,Math.max(-0.2,agilityDiff*0.02));const baseHitRate=0.9;// 基础90%命中率\nconst hitRate=Math.min(0.99,Math.max(0.7,baseHitRate+hitRateAdjustment));// 检查是否命中\nif(Math.random()>hitRate){// 闪避\nreturn 0;}// 随机波动 (±20%)\nconst randomFactor=0.8+Math.random()*0.4;return Math.floor(baseDamage*randomFactor);};// 游戏主循环\nuseEffect(()=>{// 只在战斗场景且游戏正在运行时执行战斗循环\nif(state.gameScene!=='battle'||!state.gameRunning||!state.monster)return;const gameLoop=setInterval(()=>{// 检查玩家是否死亡\nif(state.player.currentHealth<=0){dispatch({type:'ADD_LOG',payload:{text:`战斗失败！${state.player.name}被${state.monster.name}击败了！`,isCritical:true}});// 延迟后返回选择页面\nsetTimeout(()=>{dispatch({type:'RETURN_TO_SELECT'});},2000);return;}// 检查怪物是否死亡\nif(state.monster.currentHealth<=0){dispatch({type:'ADD_LOG',payload:{text:`战斗胜利！${state.player.name}击败了${state.monster.name}！`,isCritical:true}});// 获得经验值\ndispatch({type:'PLAYER_GAIN_EXPERIENCE',payload:{experience:state.monster.expReward}});// 检查是否掉落装备\ndispatch({type:'DROP_EQUIPMENT'});// 恢复玩家血量\nsetTimeout(()=>{dispatch({type:'RESET_PLAYER_HEALTH'});},1000);// 生成新怪物\nsetTimeout(()=>{dispatch({type:'RESET_MONSTER'});},2000);return;}// 玩家攻击\ndispatch({type:'PLAYER_ATTACK'});setTimeout(()=>{dispatch({type:'PLAYER_ATTACK_END'});const isCritical=Math.random()<state.player.critChance;let damage=calculateDamage(state.player,state.monster);if(damage===0){dispatch({type:'ADD_LOG',payload:{text:`${state.monster.name}闪避了${state.player.name}的攻击！`,isCritical:false}});}else{if(isCritical){damage=Math.floor(damage*state.player.critMultiplier);}dispatch({type:'MONSTER_DAMAGE',payload:{damage,isCritical}});}setTimeout(()=>{dispatch({type:'MONSTER_DAMAGE_END'});// 怪物攻击 (如果还活着)\nif(state.monster.currentHealth>0){setTimeout(()=>{dispatch({type:'MONSTER_ATTACK'});setTimeout(()=>{dispatch({type:'MONSTER_ATTACK_END'});const monsterCritical=Math.random()<state.monster.critChance;let monsterDamage=calculateDamage(state.monster,state.player);if(monsterDamage===0){dispatch({type:'ADD_LOG',payload:{text:`${state.player.name}闪避了${state.monster.name}的攻击！`,isCritical:false}});}else{if(monsterCritical){monsterDamage=Math.floor(monsterDamage*state.monster.critMultiplier);}dispatch({type:'PLAYER_DAMAGE',payload:{damage:monsterDamage,isCritical:monsterCritical}});}setTimeout(()=>{dispatch({type:'PLAYER_DAMAGE_END'});},500);},500);},500);}},500);},500);},state.gameSpeed);return()=>clearInterval(gameLoop);},[state.gameScene,state.gameRunning,state.player,state.monster,state.selectedBattlefield]);const value={state,dispatch,calculateExpToNextLevel,equipmentTypes,rarities};return/*#__PURE__*/_jsx(GameContext.Provider,{value:value,children:children});}","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","jsx","_jsx","battlefields","id","name","levelRange","background","description","equipmentTypes","HEAD","emoji","slot","BODY","BELT","SHOES","WEAPON","NECKLACE","ACCESSORY","rarities","COMMON","color","chance","multiplier","UNCOMMON","RARE","EPIC","LEGENDARY","attributeTypes","HEALTH","min","max","scaling","ATTACK","DEFENSE","AGILITY","CRIT_CHANCE","equipmentAttributes","generateEquipment","playerLevel","dropRateBonus","arguments","length","undefined","equipLevel","Math","floor","random","equipTypeKeys","Object","keys","randomType","rarityRoll","selectedRarity","attrCount","possibleAttributes","shuffledAttributes","sort","selectedAttributes","slice","attributes","forEach","attrKey","attr","baseValue","levelScaling","value","round","prefixes","randomPrefix","Date","now","type","level","rarity","rarityName","rarityColor","generateMonster","battlefieldId","minLevel","maxLevel","battlefield","find","bf","monsterLevel","monsterTypes","baseHealth","baseAttack","baseDefense","baseAgility","availableMonsters","monsterType","levelMultiplier","maxHealth","currentHealth","attack","defense","agility","critChance","critMultiplier","expReward","dropChance","calculateExpToNextLevel","pow","calculateEquipmentStats","equipment","stats","health","values","equip","entries","_ref","key","createInitialState","savedState","localStorage","getItem","parsedState","JSON","parse","inventory","maxSlots","items","modal","isOpen","data","head","body","belt","shoes","weapon","necklace","accessory","e","console","error","gameScene","selectedBattlefield","player","experience","expToNextLevel","contextMenu","position","x","y","item","monster","battleLogs","playerAttacking","monsterAttacking","playerDamaged","monsterDamaged","gameSpeed","gameRunning","gameReducer","state","action","newState","payload","text","isCritical","existingEquipment","newInventory","filter","invItem","count","existingInvItem","i","push","newEquipment","equipStats","basePlayer","updatedPlayer","existingItem","damage","expGained","leveledUp","healthIncrease","newLogs","randomRoll","setItem","stringify","GameContext","useGame","GameProvider","_ref2","children","dispatch","calculateDamage","attacker","defender","baseDamage","agilityDiff","hitRateAdjustment","baseHitRate","hitRate","randomFactor","gameLoop","setInterval","setTimeout","monsterCritical","monsterDamage","clearInterval","Provider"],"sources":["D:/mm-rpg-react/src/contexts/GameContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\r\n\r\n// 战场配置\r\nconst battlefields = [\r\n    {\r\n        id: 'novice',\r\n        name: '新手村',\r\n        levelRange: [1, 10],\r\n        background: '#e6f7ff',\r\n        description: '适合1-10级玩家的新手战场'\r\n    },\r\n    {\r\n        id: 'intermediate',\r\n        name: '进阶森林',\r\n        levelRange: [11, 20],\r\n        background: '#e6ffe6',\r\n        description: '适合11-20级玩家的进阶战场'\r\n    },\r\n    {\r\n        id: 'hell',\r\n        name: '地狱级难度',\r\n        levelRange: [21, 30],\r\n        background: '#ffe6e6',\r\n        description: '适合21-30级玩家的高难度战场'\r\n    }\r\n];\r\n\r\n// 装备类型定义\r\nconst equipmentTypes = {\r\n    HEAD: { id: 'HEAD', name: '头部', emoji: '🧢', slot: 'head' },\r\n    BODY: { id: 'BODY', name: '身体', emoji: '👕', slot: 'body' },\r\n    BELT: { id: 'BELT', name: '腰带', emoji: '🧶', slot: 'belt' },\r\n    SHOES: { id: 'SHOES', name: '鞋子', emoji: '👞', slot: 'shoes' },\r\n    WEAPON: { id: 'WEAPON', name: '武器', emoji: '🗡️', slot: 'weapon' },\r\n    NECKLACE: { id: 'NECKLACE', name: '项链', emoji: '📿', slot: 'necklace' },\r\n    ACCESSORY: { id: 'ACCESSORY', name: '首饰', emoji: '💍', slot: 'accessory' }\r\n};\r\n\r\n// 装备稀有度定义\r\nconst rarities = {\r\n    COMMON: { id: 'COMMON', name: '普通', color: '#a0a0a0', chance: 0.6, multiplier: 1 },\r\n    UNCOMMON: { id: 'UNCOMMON', name: '优秀', color: '#1eff00', chance: 0.3, multiplier: 1.5 },\r\n    RARE: { id: 'RARE', name: '精良', color: '#0070dd', chance: 0.08, multiplier: 2 },\r\n    EPIC: { id: 'EPIC', name: '史诗', color: '#a335ee', chance: 0.02, multiplier: 2.5 },\r\n    LEGENDARY: { id: 'LEGENDARY', name: '传说', color: '#ff8000', chance: 0.004, multiplier: 3 }\r\n};\r\n\r\n// 装备属性定义\r\nconst attributeTypes = {\r\n    HEALTH: { id: 'HEALTH', name: '生命值', min: 5, max: 20, scaling: 2 },\r\n    ATTACK: { id: 'ATTACK', name: '攻击力', min: 1, max: 5, scaling: 0.5 },\r\n    DEFENSE: { id: 'DEFENSE', name: '防御力', min: 1, max: 3, scaling: 0.3 },\r\n    AGILITY: { id: 'AGILITY', name: '敏捷度', min: 1, max: 3, scaling: 0.3 },\r\n    CRIT_CHANCE: { id: 'CRIT_CHANCE', name: '暴击率', min: 0.01, max: 0.03, scaling: 0.003 }\r\n};\r\n\r\n// 按装备类型划分可能的属性 (某些属性只在特定装备上出现)\r\nconst equipmentAttributes = {\r\n    HEAD: ['HEALTH', 'DEFENSE'],\r\n    BODY: ['HEALTH', 'DEFENSE'],\r\n    BELT: ['HEALTH', 'AGILITY'],\r\n    SHOES: ['AGILITY', 'DEFENSE'],\r\n    WEAPON: ['ATTACK', 'CRIT_CHANCE'],\r\n    NECKLACE: ['HEALTH', 'CRIT_CHANCE'],\r\n    ACCESSORY: ['ATTACK', 'AGILITY', 'CRIT_CHANCE']\r\n};\r\n\r\n// 随机生成装备\r\nconst generateEquipment = (playerLevel, dropRateBonus = 0) => {\r\n    // 装备等级范围\r\n    const equipLevel = Math.max(1, Math.floor(playerLevel * (0.8 + Math.random() * 0.4)));\r\n\r\n    // 随机装备类型\r\n    const equipTypeKeys = Object.keys(equipmentTypes);\r\n    const randomType = equipmentTypes[equipTypeKeys[Math.floor(Math.random() * equipTypeKeys.length)]];\r\n\r\n    // 随机稀有度 (使用概率权重)\r\n    let rarityRoll = Math.random() - dropRateBonus; // 掉落率加成提高稀有度概率\r\n    rarityRoll = Math.max(0, rarityRoll); // 确保不会是负数\r\n\r\n    let selectedRarity;\r\n    if (rarityRoll < rarities.LEGENDARY.chance) {\r\n        selectedRarity = rarities.LEGENDARY;\r\n    } else if (rarityRoll < rarities.EPIC.chance + rarities.LEGENDARY.chance) {\r\n        selectedRarity = rarities.EPIC;\r\n    } else if (rarityRoll < rarities.RARE.chance + rarities.EPIC.chance + rarities.LEGENDARY.chance) {\r\n        selectedRarity = rarities.RARE;\r\n    } else if (rarityRoll < rarities.UNCOMMON.chance + rarities.RARE.chance + rarities.EPIC.chance + rarities.LEGENDARY.chance) {\r\n        selectedRarity = rarities.UNCOMMON;\r\n    } else {\r\n        selectedRarity = rarities.COMMON;\r\n    }\r\n\r\n    // 确定属性数量 (基于稀有度)\r\n    const attrCount = Math.floor(Math.random() * 2) + 1; // 1-2个属性\r\n\r\n    // 随机选择属性\r\n    const possibleAttributes = equipmentAttributes[randomType.id];\r\n    const shuffledAttributes = [...possibleAttributes].sort(() => 0.5 - Math.random());\r\n    const selectedAttributes = shuffledAttributes.slice(0, attrCount);\r\n\r\n    // 为每个属性随机生成数值\r\n    const attributes = {};\r\n    selectedAttributes.forEach(attrKey => {\r\n        const attr = attributeTypes[attrKey];\r\n        // 基础属性值 + 等级缩放 * 稀有度倍率\r\n        const baseValue = attr.min + Math.random() * (attr.max - attr.min);\r\n        const levelScaling = attr.scaling * equipLevel;\r\n        let value = (baseValue + levelScaling) * selectedRarity.multiplier;\r\n\r\n        // 对暴击率进行特殊处理，确保不超过合理范围\r\n        if (attrKey === 'CRIT_CHANCE') {\r\n            value = Math.min(value, 0.25); // 最高25%暴击率\r\n            value = Math.round(value * 1000) / 1000; // 保留3位小数\r\n        } else {\r\n            value = Math.floor(value); // 其他属性取整\r\n        }\r\n\r\n        attributes[attrKey] = value;\r\n    });\r\n\r\n    // 生成装备名称\r\n    const prefixes = [\r\n        '锋利的', '坚固的', '闪亮的', '破旧的', '神秘的',\r\n        '古老的', '强化的', '精制的', '魔法的', '传承的'\r\n    ];\r\n    const randomPrefix = prefixes[Math.floor(Math.random() * prefixes.length)];\r\n    const name = `${randomPrefix} ${randomType.name}`;\r\n\r\n    // 生成唯一ID\r\n    const id = `equip_${Date.now()}_${Math.floor(Math.random() * 1000)}`;\r\n\r\n    return {\r\n        id,\r\n        name,\r\n        type: randomType.id,\r\n        emoji: randomType.emoji,\r\n        slot: randomType.slot,\r\n        level: equipLevel,\r\n        rarity: selectedRarity.id,\r\n        rarityName: selectedRarity.name,\r\n        rarityColor: selectedRarity.color,\r\n        attributes\r\n    };\r\n};\r\n\r\n// 怪物配置（根据等级生成）\r\nconst generateMonster = (playerLevel, battlefieldId) => {\r\n    // 根据战场确定怪物等级范围\r\n    let minLevel = playerLevel - 2;\r\n    let maxLevel = playerLevel + 2;\r\n    const battlefield = battlefields.find(bf => bf.id === battlefieldId);\r\n\r\n    // 确保怪物等级在战场范围内\r\n    if (battlefield) {\r\n        minLevel = Math.max(minLevel, battlefield.levelRange[0]);\r\n        maxLevel = Math.min(maxLevel, battlefield.levelRange[1]);\r\n    }\r\n\r\n    // 随机确定怪物等级\r\n    const monsterLevel = Math.floor(Math.random() * (maxLevel - minLevel + 1)) + minLevel;\r\n\r\n    // 怪物类型\r\n    const monsterTypes = [\r\n        { name: '史莱姆', emoji: '🟢', baseHealth: 50, baseAttack: 5, baseDefense: 2, baseAgility: 1 },\r\n        { name: '蝙蝠', emoji: '🦇', baseHealth: 40, baseAttack: 7, baseDefense: 1, baseAgility: 5 },\r\n        { name: '骷髅', emoji: '💀', baseHealth: 60, baseAttack: 6, baseDefense: 3, baseAgility: 2 },\r\n        { name: '蜘蛛', emoji: '🕷️', baseHealth: 45, baseAttack: 6, baseDefense: 2, baseAgility: 4 },\r\n        { name: '幽灵', emoji: '👻', baseHealth: 55, baseAttack: 8, baseDefense: 0, baseAgility: 6 },\r\n        { name: '巨魔', emoji: '👹', baseHealth: 70, baseAttack: 9, baseDefense: 4, baseAgility: 1 },\r\n        { name: '恶魔', emoji: '😈', baseHealth: 65, baseAttack: 10, baseDefense: 3, baseAgility: 3 }\r\n    ];\r\n\r\n    // 根据战场难度选择怪物\r\n    let availableMonsters;\r\n    if (battlefieldId === 'novice') {\r\n        availableMonsters = monsterTypes.slice(0, 3); // 简单怪物\r\n    } else if (battlefieldId === 'intermediate') {\r\n        availableMonsters = monsterTypes.slice(2, 5); // 中等怪物\r\n    } else {\r\n        availableMonsters = monsterTypes.slice(4); // 困难怪物\r\n    }\r\n\r\n    // 随机选择一种怪物\r\n    const monsterType = availableMonsters[Math.floor(Math.random() * availableMonsters.length)];\r\n\r\n    // 基于等级计算怪物属性\r\n    const levelMultiplier = 1 + (monsterLevel - 1) * 0.1; // 每级提升10%\r\n\r\n    return {\r\n        name: `${monsterLevel}级${monsterType.name}`,\r\n        emoji: monsterType.emoji,\r\n        level: monsterLevel,\r\n        maxHealth: Math.floor(monsterType.baseHealth * levelMultiplier),\r\n        currentHealth: Math.floor(monsterType.baseHealth * levelMultiplier),\r\n        attack: Math.floor(monsterType.baseAttack * levelMultiplier),\r\n        defense: Math.floor(monsterType.baseDefense * levelMultiplier),\r\n        agility: Math.floor(monsterType.baseAgility * levelMultiplier),\r\n        critChance: 0.1 + monsterLevel * 0.005, // 基础10%，每级+0.5%\r\n        critMultiplier: 1.5,\r\n        // 怪物经验值：基础值 + 等级加成\r\n        expReward: 10 + monsterLevel * 5,\r\n        // 掉落装备概率 (20% + 等级加成)\r\n        dropChance: 0.2 + monsterLevel * 0.01\r\n    };\r\n};\r\n\r\n// 计算升级所需经验\r\nconst calculateExpToNextLevel = (level) => {\r\n    // 使用指数增长公式: 100 * (level)^1.5\r\n    return Math.floor(100 * Math.pow(level, 1.5));\r\n};\r\n\r\n// 计算装备提供的属性总和\r\nconst calculateEquipmentStats = (equipment) => {\r\n    const stats = {\r\n        health: 0,\r\n        attack: 0,\r\n        defense: 0,\r\n        agility: 0,\r\n        critChance: 0\r\n    };\r\n\r\n    // 遍历所有装备槽位\r\n    Object.values(equipment).forEach(equip => {\r\n        if (!equip) return; // 如果槽位没有装备\r\n\r\n        // 累加装备属性\r\n        Object.entries(equip.attributes).forEach(([key, value]) => {\r\n            switch (key) {\r\n                case 'HEALTH':\r\n                    stats.health += value;\r\n                    break;\r\n                case 'ATTACK':\r\n                    stats.attack += value;\r\n                    break;\r\n                case 'DEFENSE':\r\n                    stats.defense += value;\r\n                    break;\r\n                case 'AGILITY':\r\n                    stats.agility += value;\r\n                    break;\r\n                case 'CRIT_CHANCE':\r\n                    stats.critChance += value;\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        });\r\n    });\r\n\r\n    return stats;\r\n};\r\n\r\n// 初始状态\r\n// 初始状态\r\nconst createInitialState = () => {\r\n    try {\r\n        // 尝试从localStorage读取保存的状态\r\n        const savedState = localStorage.getItem('rpgGameState');\r\n        if (savedState) {\r\n            const parsedState = JSON.parse(savedState);\r\n\r\n            // 检查并确保所有关键属性都存在，如果不存在则使用默认值\r\n            // 确保inventory存在\r\n            if (!parsedState.inventory) {\r\n                parsedState.inventory = {\r\n                    maxSlots: 20,\r\n                    items: []\r\n                };\r\n            }\r\n\r\n            // 确保modal存在\r\n            if (!parsedState.modal) {\r\n                parsedState.modal = {\r\n                    isOpen: false,\r\n                    type: null,\r\n                    data: null\r\n                };\r\n            }\r\n\r\n            // 确保equipment存在\r\n            if (!parsedState.equipment) {\r\n                parsedState.equipment = {\r\n                    head: null,\r\n                    body: null,\r\n                    belt: null,\r\n                    shoes: null,\r\n                    weapon: null,\r\n                    necklace: null,\r\n                    accessory: null\r\n                };\r\n            }\r\n\r\n            return parsedState;\r\n        }\r\n    } catch (e) {\r\n        console.error('Failed to parse saved game state:', e);\r\n    }\r\n\r\n    // 默认初始状态\r\n    return {\r\n        // 游戏场景状态: 'select' - 战场选择页面, 'battle' - 战斗页面\r\n        gameScene: 'select',\r\n        selectedBattlefield: null,\r\n\r\n        // 角色基础属性\r\n        player: {\r\n            name: \"勇者\",\r\n            level: 1,\r\n            experience: 0,\r\n            expToNextLevel: calculateExpToNextLevel(1),\r\n            maxHealth: 100,\r\n            currentHealth: 100,\r\n            attack: 10,\r\n            defense: 5,\r\n            agility: 3, // 新增敏捷度属性\r\n            critChance: 0.1,\r\n            critMultiplier: 1.5\r\n        },\r\n\r\n        // 装备系统\r\n        equipment: {\r\n            head: null,\r\n            body: null,\r\n            belt: null,\r\n            shoes: null,\r\n            weapon: null,\r\n            necklace: null,\r\n            accessory: null\r\n        },\r\n\r\n        // 物品栏\r\n        inventory: {\r\n            maxSlots: 20, // 物品栏最大格子数\r\n            items: [] // 物品列表，每个物品包含 {id, count, ...itemData}\r\n        },\r\n\r\n        // 模态窗口状态\r\n        modal: {\r\n            isOpen: false,\r\n            type: null, // 'character', 'equipment', 'inventory'\r\n            data: null\r\n        },\r\n\r\n        // 物品右键菜单状态\r\n        contextMenu: {\r\n            isOpen: false,\r\n            position: { x: 0, y: 0 },\r\n            item: null\r\n        },\r\n\r\n        monster: null,\r\n\r\n        battleLogs: [],\r\n        playerAttacking: false,\r\n        monsterAttacking: false,\r\n        playerDamaged: false,\r\n        monsterDamaged: false,\r\n        gameSpeed: 2000, // 每回合间隔(毫秒)\r\n        gameRunning: true,\r\n        battlefields: battlefields\r\n    };\r\n};\r\n\r\n// Reducer函数来处理状态更新\r\nfunction gameReducer(state, action) {\r\n    let newState;\r\n\r\n    switch (action.type) {\r\n        // 选择战场\r\n        case 'SELECT_BATTLEFIELD':\r\n            newState = {\r\n                ...state,\r\n                gameScene: 'battle',\r\n                selectedBattlefield: action.payload,\r\n                battleLogs: [{\r\n                    id: Date.now(),\r\n                    text: `进入${action.payload.name}战场！`,\r\n                    isCritical: false\r\n                }],\r\n                // 生成新怪物\r\n                monster: generateMonster(state.player.level, action.payload.id)\r\n            };\r\n            break;\r\n\r\n        // 返回选择页面\r\n        case 'RETURN_TO_SELECT':\r\n            newState = {\r\n                ...state,\r\n                gameScene: 'select',\r\n                monster: null,\r\n                battleLogs: []\r\n            };\r\n            break;\r\n\r\n        // 打开模态窗口\r\n        case 'OPEN_MODAL':\r\n            newState = {\r\n                ...state,\r\n                modal: {\r\n                    isOpen: true,\r\n                    type: action.payload.type,\r\n                    data: action.payload.data || null\r\n                }\r\n            };\r\n            break;\r\n\r\n        // 关闭模态窗口\r\n        case 'CLOSE_MODAL':\r\n            newState = {\r\n                ...state,\r\n                modal: {\r\n                    ...state.modal,\r\n                    isOpen: false\r\n                }\r\n            };\r\n            break;\r\n\r\n        // 打开右键菜单\r\n        case 'OPEN_CONTEXT_MENU':\r\n            newState = {\r\n                ...state,\r\n                contextMenu: {\r\n                    isOpen: true,\r\n                    position: action.payload.position,\r\n                    item: action.payload.item\r\n                }\r\n            };\r\n            break;\r\n\r\n        // 关闭右键菜单\r\n        case 'CLOSE_CONTEXT_MENU':\r\n            newState = {\r\n                ...state,\r\n                contextMenu: {\r\n                    ...state.contextMenu,\r\n                    isOpen: false\r\n                }\r\n            };\r\n            break;\r\n\r\n        // 装备物品\r\n        case 'EQUIP_ITEM':\r\n            {\r\n                const item = action.payload;\r\n                const { slot } = item;\r\n\r\n                // 检查是否已经有装备在该槽位\r\n                const existingEquipment = state.equipment[slot];\r\n                let newInventory = { ...state.inventory };\r\n\r\n                // 从物品栏移除要装备的物品\r\n                newInventory.items = newInventory.items.filter(invItem => {\r\n                    if (invItem.id === item.id) {\r\n                        if (invItem.count > 1) {\r\n                            invItem.count--;\r\n                            return true;\r\n                        }\r\n                        return false;\r\n                    }\r\n                    return true;\r\n                });\r\n\r\n                // 如果槽位已有装备，将其放回物品栏\r\n                if (existingEquipment) {\r\n                    // 检查物品栏是否已有相同物品\r\n                    const existingInvItem = newInventory.items.find(i =>\r\n                        i.id === existingEquipment.id ||\r\n                        (i.name === existingEquipment.name && i.level === existingEquipment.level)\r\n                    );\r\n\r\n                    if (existingInvItem) {\r\n                        existingInvItem.count++;\r\n                    } else {\r\n                        // 检查物品栏是否已满\r\n                        if (newInventory.items.length < newInventory.maxSlots) {\r\n                            newInventory.items.push({ ...existingEquipment, count: 1 });\r\n                        } else {\r\n                            // 如果满了，添加提示\r\n                            newState = {\r\n                                ...state,\r\n                                battleLogs: [\r\n                                    {\r\n                                        id: Date.now(),\r\n                                        text: `物品栏已满，无法卸下${existingEquipment.name}！`,\r\n                                        isCritical: true\r\n                                    },\r\n                                    ...state.battleLogs.slice(0, 19)\r\n                                ]\r\n                            };\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // 创建新的装备状态\r\n                const newEquipment = {\r\n                    ...state.equipment,\r\n                    [slot]: { ...item, count: 1 }\r\n                };\r\n\r\n                // 获取新的装备加成\r\n                const equipStats = calculateEquipmentStats(newEquipment);\r\n\r\n                // 更新玩家属性（基础属性+装备加成）\r\n                const basePlayer = { ...state.player };\r\n                const updatedPlayer = {\r\n                    ...basePlayer,\r\n                    maxHealth: basePlayer.maxHealth + equipStats.health,\r\n                    currentHealth: Math.min(basePlayer.currentHealth + equipStats.health, basePlayer.maxHealth + equipStats.health),\r\n                    attack: basePlayer.attack + equipStats.attack,\r\n                    defense: basePlayer.defense + equipStats.defense,\r\n                    agility: basePlayer.agility + equipStats.agility,\r\n                    critChance: basePlayer.critChance + equipStats.critChance\r\n                };\r\n\r\n                newState = {\r\n                    ...state,\r\n                    equipment: newEquipment,\r\n                    inventory: newInventory,\r\n                    player: updatedPlayer,\r\n                    battleLogs: [\r\n                        {\r\n                            id: Date.now(),\r\n                            text: `装备了${item.name}！`,\r\n                            isCritical: false\r\n                        },\r\n                        ...state.battleLogs.slice(0, 19)\r\n                    ]\r\n                };\r\n            }\r\n            break;\r\n\r\n        // 卸下装备\r\n        case 'UNEQUIP_ITEM':\r\n            {\r\n                const slot = action.payload;\r\n                const item = state.equipment[slot];\r\n\r\n                if (!item) {\r\n                    newState = state;\r\n                    break;\r\n                }\r\n\r\n                // 检查物品栏是否已满\r\n                if (state.inventory.items.length >= state.inventory.maxSlots) {\r\n                    newState = {\r\n                        ...state,\r\n                        battleLogs: [\r\n                            {\r\n                                id: Date.now(),\r\n                                text: `物品栏已满，无法卸下${item.name}！`,\r\n                                isCritical: true\r\n                            },\r\n                            ...state.battleLogs.slice(0, 19)\r\n                        ]\r\n                    };\r\n                    break;\r\n                }\r\n\r\n                // 检查物品栏是否已有相同物品\r\n                let newInventory = { ...state.inventory };\r\n                const existingItem = newInventory.items.find(i =>\r\n                    i.id === item.id ||\r\n                    (i.name === item.name && i.level === item.level)\r\n                );\r\n\r\n                if (existingItem) {\r\n                    existingItem.count++;\r\n                } else {\r\n                    newInventory.items.push({ ...item, count: 1 });\r\n                }\r\n\r\n                // 创建新的装备状态\r\n                const newEquipment = {\r\n                    ...state.equipment,\r\n                    [slot]: null\r\n                };\r\n\r\n                // 获取新的装备加成\r\n                const equipStats = calculateEquipmentStats(newEquipment);\r\n\r\n                // 更新玩家属性（基础属性+装备加成）\r\n                const basePlayer = { ...state.player };\r\n                const updatedPlayer = {\r\n                    ...basePlayer,\r\n                    maxHealth: basePlayer.maxHealth - equipStats.health,\r\n                    currentHealth: Math.min(basePlayer.currentHealth, basePlayer.maxHealth - equipStats.health),\r\n                    attack: basePlayer.attack - equipStats.attack,\r\n                    defense: basePlayer.defense - equipStats.defense,\r\n                    agility: basePlayer.agility - equipStats.agility,\r\n                    critChance: basePlayer.critChance - equipStats.critChance\r\n                };\r\n\r\n                newState = {\r\n                    ...state,\r\n                    equipment: newEquipment,\r\n                    inventory: newInventory,\r\n                    player: updatedPlayer,\r\n                    battleLogs: [\r\n                        {\r\n                            id: Date.now(),\r\n                            text: `卸下了${item.name}！`,\r\n                            isCritical: false\r\n                        },\r\n                        ...state.battleLogs.slice(0, 19)\r\n                    ]\r\n                };\r\n            }\r\n            break;\r\n\r\n        // 丢弃物品\r\n        case 'DISCARD_ITEM':\r\n            {\r\n                const item = action.payload;\r\n\r\n                // 从物品栏移除物品\r\n                const newInventory = { ...state.inventory };\r\n                newInventory.items = newInventory.items.filter(invItem => invItem.id !== item.id);\r\n\r\n                newState = {\r\n                    ...state,\r\n                    inventory: newInventory,\r\n                    battleLogs: [\r\n                        {\r\n                            id: Date.now(),\r\n                            text: `丢弃了${item.name} x${item.count}！`,\r\n                            isCritical: false\r\n                        },\r\n                        ...state.battleLogs.slice(0, 19)\r\n                    ]\r\n                };\r\n            }\r\n            break;\r\n\r\n        // 获得物品\r\n        case 'GAIN_ITEM':\r\n            {\r\n                const item = action.payload;\r\n\r\n                // 检查物品栏是否已满\r\n                if (state.inventory.items.length >= state.inventory.maxSlots) {\r\n                    // 物品栏已满，无法获得物品\r\n                    newState = {\r\n                        ...state,\r\n                        battleLogs: [\r\n                            {\r\n                                id: Date.now(),\r\n                                text: `物品栏已满，无法获得${item.name}！`,\r\n                                isCritical: true\r\n                            },\r\n                            ...state.battleLogs.slice(0, 19)\r\n                        ]\r\n                    };\r\n                    break;\r\n                }\r\n\r\n                // 检查物品栏是否已有相同物品\r\n                const newInventory = { ...state.inventory };\r\n                const existingItem = newInventory.items.find(i =>\r\n                    i.id === item.id ||\r\n                    (i.name === item.name && i.level === item.level && i.rarity === item.rarity)\r\n                );\r\n\r\n                if (existingItem) {\r\n                    // 如果已有相同物品，增加数量\r\n                    existingItem.count++;\r\n                } else {\r\n                    // 否则添加新物品\r\n                    newInventory.items.push({ ...item, count: 1 });\r\n                }\r\n\r\n                newState = {\r\n                    ...state,\r\n                    inventory: newInventory,\r\n                    battleLogs: [\r\n                        {\r\n                            id: Date.now(),\r\n                            text: `获得了${item.name}！`,\r\n                            isCritical: false\r\n                        },\r\n                        ...state.battleLogs.slice(0, 19)\r\n                    ]\r\n                };\r\n            }\r\n            break;\r\n\r\n        // 玩家攻击\r\n        case 'PLAYER_ATTACK':\r\n            newState = {\r\n                ...state,\r\n                playerAttacking: true\r\n            };\r\n            break;\r\n\r\n        // 玩家攻击结束\r\n        case 'PLAYER_ATTACK_END':\r\n            newState = {\r\n                ...state,\r\n                playerAttacking: false\r\n            };\r\n            break;\r\n\r\n        // 怪物受伤\r\n        case 'MONSTER_DAMAGE':\r\n            newState = {\r\n                ...state,\r\n                monsterDamaged: true,\r\n                monster: {\r\n                    ...state.monster,\r\n                    currentHealth: Math.max(0, state.monster.currentHealth - action.payload.damage)\r\n                },\r\n                battleLogs: [\r\n                    {\r\n                        id: Date.now(),\r\n                        text: action.payload.isCritical\r\n                            ? `暴击！${state.player.name}对${state.monster.name}造成了${action.payload.damage}点伤害！`\r\n                            : `${state.player.name}对${state.monster.name}造成了${action.payload.damage}点伤害。`,\r\n                        isCritical: action.payload.isCritical\r\n                    },\r\n                    ...state.battleLogs.slice(0, 19)\r\n                ]\r\n            };\r\n            break;\r\n\r\n        // 怪物受伤结束\r\n        case 'MONSTER_DAMAGE_END':\r\n            newState = {\r\n                ...state,\r\n                monsterDamaged: false\r\n            };\r\n            break;\r\n\r\n        // 怪物攻击\r\n        case 'MONSTER_ATTACK':\r\n            newState = {\r\n                ...state,\r\n                monsterAttacking: true\r\n            };\r\n            break;\r\n\r\n        // 怪物攻击结束\r\n        case 'MONSTER_ATTACK_END':\r\n            newState = {\r\n                ...state,\r\n                monsterAttacking: false\r\n            };\r\n            break;\r\n\r\n        // 玩家受伤\r\n        case 'PLAYER_DAMAGE':\r\n            newState = {\r\n                ...state,\r\n                playerDamaged: true,\r\n                player: {\r\n                    ...state.player,\r\n                    currentHealth: Math.max(0, state.player.currentHealth - action.payload.damage)\r\n                },\r\n                battleLogs: [\r\n                    {\r\n                        id: Date.now(),\r\n                        text: action.payload.isCritical\r\n                            ? `暴击！${state.monster.name}对${state.player.name}造成了${action.payload.damage}点伤害！`\r\n                            : `${state.monster.name}对${state.player.name}造成了${action.payload.damage}点伤害。`,\r\n                        isCritical: action.payload.isCritical\r\n                    },\r\n                    ...state.battleLogs.slice(0, 19)\r\n                ]\r\n            };\r\n            break;\r\n\r\n        // 玩家受伤结束\r\n        case 'PLAYER_DAMAGE_END':\r\n            newState = {\r\n                ...state,\r\n                playerDamaged: false\r\n            };\r\n            break;\r\n\r\n        // 添加日志\r\n        case 'ADD_LOG':\r\n            newState = {\r\n                ...state,\r\n                battleLogs: [\r\n                    { id: Date.now(), text: action.payload.text, isCritical: action.payload.isCritical },\r\n                    ...state.battleLogs.slice(0, 19)\r\n                ]\r\n            };\r\n            break;\r\n\r\n        // 玩家获得经验\r\n        case 'PLAYER_GAIN_EXPERIENCE':\r\n            {\r\n                const expGained = action.payload.experience;\r\n                let updatedPlayer = { ...state.player };\r\n                updatedPlayer.experience += expGained;\r\n\r\n                // 检查是否升级\r\n                let leveledUp = false;\r\n                while (updatedPlayer.experience >= updatedPlayer.expToNextLevel) {\r\n                    // 升级\r\n                    updatedPlayer.level += 1;\r\n                    updatedPlayer.experience -= updatedPlayer.expToNextLevel;\r\n                    updatedPlayer.expToNextLevel = calculateExpToNextLevel(updatedPlayer.level);\r\n\r\n                    // 属性提升\r\n                    const healthIncrease = Math.floor(20 + updatedPlayer.level * 5);\r\n                    updatedPlayer.maxHealth += healthIncrease;\r\n                    updatedPlayer.currentHealth += healthIncrease;\r\n                    updatedPlayer.attack += 2;\r\n                    updatedPlayer.defense += 1;\r\n                    updatedPlayer.agility += 1;\r\n\r\n                    // 每10级增加暴击率\r\n                    if (updatedPlayer.level % 10 === 0) {\r\n                        updatedPlayer.critChance += 0.05;\r\n                    }\r\n\r\n                    leveledUp = true;\r\n                }\r\n\r\n                const newLogs = leveledUp\r\n                    ? [\r\n                        {\r\n                            id: Date.now(),\r\n                            text: `获得${expGained}点经验！升级到${updatedPlayer.level}级！`,\r\n                            isCritical: true\r\n                        },\r\n                        ...state.battleLogs\r\n                    ]\r\n                    : [\r\n                        {\r\n                            id: Date.now(),\r\n                            text: `获得${expGained}点经验！`,\r\n                            isCritical: false\r\n                        },\r\n                        ...state.battleLogs\r\n                    ];\r\n\r\n                newState = {\r\n                    ...state,\r\n                    player: updatedPlayer,\r\n                    battleLogs: newLogs.slice(0, 20)\r\n                };\r\n            }\r\n            break;\r\n\r\n        // 掉落装备\r\n        case 'DROP_EQUIPMENT':\r\n            {\r\n                // 检查是否掉落装备\r\n                const monster = state.monster;\r\n                const randomRoll = Math.random();\r\n\r\n                if (randomRoll <= monster.dropChance) {\r\n                    // 生成装备\r\n                    const equipment = generateEquipment(monster.level);\r\n\r\n                    // 检查物品栏是否已满\r\n                    if (state.inventory.items.length >= state.inventory.maxSlots) {\r\n                        // 物品栏已满，无法获得装备\r\n                        newState = {\r\n                            ...state,\r\n                            battleLogs: [\r\n                                {\r\n                                    id: Date.now(),\r\n                                    text: `怪物掉落了${equipment.rarityName}品质的${equipment.name}，但物品栏已满，无法拾取！`,\r\n                                    isCritical: true\r\n                                },\r\n                                ...state.battleLogs.slice(0, 19)\r\n                            ]\r\n                        };\r\n                        break;\r\n                    }\r\n\r\n                    // 添加装备到物品栏\r\n                    const newInventory = { ...state.inventory };\r\n                    newInventory.items.push({ ...equipment, count: 1 });\r\n\r\n                    newState = {\r\n                        ...state,\r\n                        inventory: newInventory,\r\n                        battleLogs: [\r\n                            {\r\n                                id: Date.now(),\r\n                                text: `怪物掉落了${equipment.rarityName}品质的${equipment.name}！`,\r\n                                isCritical: true\r\n                            },\r\n                            ...state.battleLogs.slice(0, 19)\r\n                        ]\r\n                    };\r\n                } else {\r\n                    // 没有掉落装备\r\n                    newState = state;\r\n                }\r\n            }\r\n            break;\r\n\r\n        // 重置怪物\r\n        case 'RESET_MONSTER':\r\n            newState = {\r\n                ...state,\r\n                monster: generateMonster(state.player.level, state.selectedBattlefield.id),\r\n                battleLogs: [\r\n                    { id: Date.now(), text: \"新的怪物出现了！\", isCritical: false },\r\n                    ...state.battleLogs.slice(0, 19)\r\n                ]\r\n            };\r\n            break;\r\n\r\n        // 恢复玩家生命值\r\n        case 'RESET_PLAYER_HEALTH':\r\n            newState = {\r\n                ...state,\r\n                player: {\r\n                    ...state.player,\r\n                    currentHealth: state.player.maxHealth\r\n                },\r\n                battleLogs: [\r\n                    { id: Date.now(), text: `${state.player.name}恢复了健康！`, isCritical: false },\r\n                    ...state.battleLogs.slice(0, 19)\r\n                ]\r\n            };\r\n            break;\r\n\r\n        // 切换游戏运行状态\r\n        case 'TOGGLE_GAME':\r\n            newState = {\r\n                ...state,\r\n                gameRunning: !state.gameRunning\r\n            };\r\n            break;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n\r\n    // 保存状态到localStorage\r\n    localStorage.setItem('rpgGameState', JSON.stringify(newState));\r\n    return newState;\r\n}\r\n\r\n// 创建Context\r\nconst GameContext = createContext();\r\n\r\n// 自定义钩子，方便组件使用Context\r\nexport function useGame() {\r\n    return useContext(GameContext);\r\n}\r\n\r\n// Provider组件\r\nexport function GameProvider({ children }) {\r\n    const [state, dispatch] = useReducer(gameReducer, null, createInitialState);\r\n\r\n    // 战斗伤害计算\r\n    const calculateDamage = (attacker, defender) => {\r\n        // 基础伤害 = 攻击力 - 防御力/2\r\n        let baseDamage = Math.max(1, attacker.attack - defender.defense / 2);\r\n\r\n        // 敏捷影响命中和闪避\r\n        const agilityDiff = attacker.agility - defender.agility;\r\n\r\n        // 命中率调整 (加成或减少最多20%)\r\n        const hitRateAdjustment = Math.min(0.2, Math.max(-0.2, agilityDiff * 0.02));\r\n        const baseHitRate = 0.9; // 基础90%命中率\r\n        const hitRate = Math.min(0.99, Math.max(0.7, baseHitRate + hitRateAdjustment));\r\n\r\n        // 检查是否命中\r\n        if (Math.random() > hitRate) {\r\n            // 闪避\r\n            return 0;\r\n        }\r\n\r\n        // 随机波动 (±20%)\r\n        const randomFactor = 0.8 + Math.random() * 0.4;\r\n        return Math.floor(baseDamage * randomFactor);\r\n    };\r\n\r\n    // 游戏主循环\r\n    useEffect(() => {\r\n        // 只在战斗场景且游戏正在运行时执行战斗循环\r\n        if (state.gameScene !== 'battle' || !state.gameRunning || !state.monster) return;\r\n\r\n        const gameLoop = setInterval(() => {\r\n            // 检查玩家是否死亡\r\n            if (state.player.currentHealth <= 0) {\r\n                dispatch({\r\n                    type: 'ADD_LOG',\r\n                    payload: {\r\n                        text: `战斗失败！${state.player.name}被${state.monster.name}击败了！`,\r\n                        isCritical: true\r\n                    }\r\n                });\r\n\r\n                // 延迟后返回选择页面\r\n                setTimeout(() => {\r\n                    dispatch({ type: 'RETURN_TO_SELECT' });\r\n                }, 2000);\r\n\r\n                return;\r\n            }\r\n\r\n            // 检查怪物是否死亡\r\n            if (state.monster.currentHealth <= 0) {\r\n                dispatch({\r\n                    type: 'ADD_LOG',\r\n                    payload: {\r\n                        text: `战斗胜利！${state.player.name}击败了${state.monster.name}！`,\r\n                        isCritical: true\r\n                    }\r\n                });\r\n\r\n                // 获得经验值\r\n                dispatch({\r\n                    type: 'PLAYER_GAIN_EXPERIENCE',\r\n                    payload: { experience: state.monster.expReward }\r\n                });\r\n\r\n                // 检查是否掉落装备\r\n                dispatch({ type: 'DROP_EQUIPMENT' });\r\n\r\n                // 恢复玩家血量\r\n                setTimeout(() => {\r\n                    dispatch({ type: 'RESET_PLAYER_HEALTH' });\r\n                }, 1000);\r\n\r\n                // 生成新怪物\r\n                setTimeout(() => {\r\n                    dispatch({ type: 'RESET_MONSTER' });\r\n                }, 2000);\r\n\r\n                return;\r\n            }\r\n\r\n            // 玩家攻击\r\n            dispatch({ type: 'PLAYER_ATTACK' });\r\n\r\n            setTimeout(() => {\r\n                dispatch({ type: 'PLAYER_ATTACK_END' });\r\n\r\n                const isCritical = Math.random() < state.player.critChance;\r\n                let damage = calculateDamage(state.player, state.monster);\r\n\r\n                if (damage === 0) {\r\n                    dispatch({\r\n                        type: 'ADD_LOG',\r\n                        payload: {\r\n                            text: `${state.monster.name}闪避了${state.player.name}的攻击！`,\r\n                            isCritical: false\r\n                        }\r\n                    });\r\n                } else {\r\n                    if (isCritical) {\r\n                        damage = Math.floor(damage * state.player.critMultiplier);\r\n                    }\r\n\r\n                    dispatch({\r\n                        type: 'MONSTER_DAMAGE',\r\n                        payload: { damage, isCritical }\r\n                    });\r\n                }\r\n\r\n                setTimeout(() => {\r\n                    dispatch({ type: 'MONSTER_DAMAGE_END' });\r\n\r\n                    // 怪物攻击 (如果还活着)\r\n                    if (state.monster.currentHealth > 0) {\r\n                        setTimeout(() => {\r\n                            dispatch({ type: 'MONSTER_ATTACK' });\r\n\r\n                            setTimeout(() => {\r\n                                dispatch({ type: 'MONSTER_ATTACK_END' });\r\n\r\n                                const monsterCritical = Math.random() < state.monster.critChance;\r\n                                let monsterDamage = calculateDamage(state.monster, state.player);\r\n\r\n                                if (monsterDamage === 0) {\r\n                                    dispatch({\r\n                                        type: 'ADD_LOG',\r\n                                        payload: {\r\n                                            text: `${state.player.name}闪避了${state.monster.name}的攻击！`,\r\n                                            isCritical: false\r\n                                        }\r\n                                    });\r\n                                } else {\r\n                                    if (monsterCritical) {\r\n                                        monsterDamage = Math.floor(monsterDamage * state.monster.critMultiplier);\r\n                                    }\r\n\r\n                                    dispatch({\r\n                                        type: 'PLAYER_DAMAGE',\r\n                                        payload: { damage: monsterDamage, isCritical: monsterCritical }\r\n                                    });\r\n                                }\r\n\r\n                                setTimeout(() => {\r\n                                    dispatch({ type: 'PLAYER_DAMAGE_END' });\r\n                                }, 500);\r\n                            }, 500);\r\n                        }, 500);\r\n                    }\r\n                }, 500);\r\n            }, 500);\r\n\r\n        }, state.gameSpeed);\r\n\r\n        return () => clearInterval(gameLoop);\r\n    }, [state.gameScene, state.gameRunning, state.player, state.monster, state.selectedBattlefield]);\r\n\r\n    const value = {\r\n        state,\r\n        dispatch,\r\n        calculateExpToNextLevel,\r\n        equipmentTypes,\r\n        rarities\r\n    };\r\n\r\n    return (\r\n        <GameContext.Provider value={value}>\r\n            {children}\r\n        </GameContext.Provider>\r\n    );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}