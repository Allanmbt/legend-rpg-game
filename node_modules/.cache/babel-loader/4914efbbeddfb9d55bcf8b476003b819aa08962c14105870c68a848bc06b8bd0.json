{"ast":null,"code":"var _jsxFileName = \"D:\\\\mm-rpg-react\\\\src\\\\contexts\\\\GameContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\n\n// 初始状态\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  player: {\n    name: \"勇者\",\n    maxHealth: 100,\n    currentHealth: 100,\n    attack: 10,\n    defense: 5,\n    critChance: 0.3,\n    critMultiplier: 2\n  },\n  monster: {\n    name: \"恶魔\",\n    maxHealth: 80,\n    currentHealth: 80,\n    attack: 8,\n    defense: 3,\n    critChance: 0.2,\n    critMultiplier: 1.5\n  },\n  battleLogs: [],\n  playerAttacking: false,\n  monsterAttacking: false,\n  playerDamaged: false,\n  monsterDamaged: false,\n  gameSpeed: 2000,\n  // 每回合间隔(毫秒)\n  gameRunning: true\n};\n\n// Reducer函数来处理状态更新\nfunction gameReducer(state, action) {\n  switch (action.type) {\n    case 'PLAYER_ATTACK':\n      return {\n        ...state,\n        playerAttacking: true\n      };\n    case 'PLAYER_ATTACK_END':\n      return {\n        ...state,\n        playerAttacking: false\n      };\n    case 'MONSTER_DAMAGE':\n      return {\n        ...state,\n        monsterDamaged: true,\n        monster: {\n          ...state.monster,\n          currentHealth: Math.max(0, state.monster.currentHealth - action.payload.damage)\n        },\n        battleLogs: [{\n          id: Date.now(),\n          text: action.payload.isCritical ? `暴击！${state.player.name}对${state.monster.name}造成了${action.payload.damage}点伤害！` : `${state.player.name}对${state.monster.name}造成了${action.payload.damage}点伤害。`,\n          isCritical: action.payload.isCritical\n        }, ...state.battleLogs.slice(0, 19) // 保留最新的20条日志\n        ]\n      };\n    case 'MONSTER_DAMAGE_END':\n      return {\n        ...state,\n        monsterDamaged: false\n      };\n    case 'MONSTER_ATTACK':\n      return {\n        ...state,\n        monsterAttacking: true\n      };\n    case 'MONSTER_ATTACK_END':\n      return {\n        ...state,\n        monsterAttacking: false\n      };\n    case 'PLAYER_DAMAGE':\n      return {\n        ...state,\n        playerDamaged: true,\n        player: {\n          ...state.player,\n          currentHealth: Math.max(0, state.player.currentHealth - action.payload.damage)\n        },\n        battleLogs: [{\n          id: Date.now(),\n          text: action.payload.isCritical ? `暴击！${state.monster.name}对${state.player.name}造成了${action.payload.damage}点伤害！` : `${state.monster.name}对${state.player.name}造成了${action.payload.damage}点伤害。`,\n          isCritical: action.payload.isCritical\n        }, ...state.battleLogs.slice(0, 19)]\n      };\n    case 'PLAYER_DAMAGE_END':\n      return {\n        ...state,\n        playerDamaged: false\n      };\n    case 'ADD_LOG':\n      return {\n        ...state,\n        battleLogs: [{\n          id: Date.now(),\n          text: action.payload.text,\n          isCritical: action.payload.isCritical\n        }, ...state.battleLogs.slice(0, 19)]\n      };\n    case 'RESET_MONSTER':\n      return {\n        ...state,\n        monster: {\n          ...state.monster,\n          currentHealth: state.monster.maxHealth\n        },\n        battleLogs: [{\n          id: Date.now(),\n          text: \"新的怪物出现了！\",\n          isCritical: false\n        }, ...state.battleLogs]\n      };\n    case 'RESET_PLAYER':\n      return {\n        ...state,\n        player: {\n          ...state.player,\n          currentHealth: state.player.maxHealth\n        },\n        battleLogs: [{\n          id: Date.now(),\n          text: `${state.player.name}恢复了！`,\n          isCritical: false\n        }, ...state.battleLogs]\n      };\n    case 'TOGGLE_GAME':\n      return {\n        ...state,\n        gameRunning: !state.gameRunning\n      };\n    default:\n      return state;\n  }\n}\n\n// 创建Context\nconst GameContext = /*#__PURE__*/createContext();\n\n// 自定义钩子，方便组件使用Context\nexport function useGame() {\n  _s();\n  return useContext(GameContext);\n}\n\n// Provider组件\n_s(useGame, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function GameProvider({\n  children\n}) {\n  _s2();\n  const [state, dispatch] = useReducer(gameReducer, initialState);\n\n  // 战斗伤害计算\n  const calculateDamage = (attacker, defender) => {\n    let baseDamage = attacker.attack - defender.defense / 2;\n    baseDamage = Math.max(1, baseDamage); // 确保至少1点伤害\n\n    // 随机波动 (±20%)\n    const randomFactor = 0.8 + Math.random() * 0.4;\n    return Math.floor(baseDamage * randomFactor);\n  };\n\n  // 游戏主循环\n  useEffect(() => {\n    if (!state.gameRunning) return;\n    const gameLoop = setInterval(() => {\n      // 检查战斗是否可以继续\n      if (state.monster.currentHealth <= 0) {\n        dispatch({\n          type: 'ADD_LOG',\n          payload: {\n            text: `战斗胜利！${state.player.name}击败了${state.monster.name}！`,\n            isCritical: true\n          }\n        });\n        setTimeout(() => dispatch({\n          type: 'RESET_MONSTER'\n        }), 2000);\n        return;\n      }\n      if (state.player.currentHealth <= 0) {\n        dispatch({\n          type: 'ADD_LOG',\n          payload: {\n            text: `战斗失败！${state.player.name}被${state.monster.name}击败了！`,\n            isCritical: true\n          }\n        });\n        setTimeout(() => dispatch({\n          type: 'RESET_PLAYER'\n        }), 2000);\n        return;\n      }\n\n      // 玩家攻击\n      dispatch({\n        type: 'PLAYER_ATTACK'\n      });\n      setTimeout(() => {\n        dispatch({\n          type: 'PLAYER_ATTACK_END'\n        });\n        const isCritical = Math.random() < state.player.critChance;\n        let damage = calculateDamage(state.player, state.monster);\n        if (isCritical) {\n          damage = Math.floor(damage * state.player.critMultiplier);\n        }\n        dispatch({\n          type: 'MONSTER_DAMAGE',\n          payload: {\n            damage,\n            isCritical\n          }\n        });\n        setTimeout(() => {\n          dispatch({\n            type: 'MONSTER_DAMAGE_END'\n          });\n\n          // 怪物攻击 (如果还活着)\n          if (state.monster.currentHealth > 0) {\n            setTimeout(() => {\n              dispatch({\n                type: 'MONSTER_ATTACK'\n              });\n              setTimeout(() => {\n                dispatch({\n                  type: 'MONSTER_ATTACK_END'\n                });\n                const monsterCritical = Math.random() < state.monster.critChance;\n                let monsterDamage = calculateDamage(state.monster, state.player);\n                if (monsterCritical) {\n                  monsterDamage = Math.floor(monsterDamage * state.monster.critMultiplier);\n                }\n                dispatch({\n                  type: 'PLAYER_DAMAGE',\n                  payload: {\n                    damage: monsterDamage,\n                    isCritical: monsterCritical\n                  }\n                });\n                setTimeout(() => {\n                  dispatch({\n                    type: 'PLAYER_DAMAGE_END'\n                  });\n                }, 500);\n              }, 500);\n            }, 500);\n          }\n        }, 500);\n      }, 500);\n    }, state.gameSpeed);\n    return () => clearInterval(gameLoop);\n  }, [state.gameRunning, state.player, state.monster]);\n\n  // 游戏初始化\n  useEffect(() => {\n    dispatch({\n      type: 'ADD_LOG',\n      payload: {\n        text: \"战斗开始！\",\n        isCritical: false\n      }\n    });\n  }, []);\n  const value = {\n    state,\n    dispatch\n  };\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 251,\n    columnNumber: 9\n  }, this);\n}\n_s2(GameProvider, \"GUSXxL/WUElrtHc/X73NyHNRMdw=\");\n_c = GameProvider;\nvar _c;\n$RefreshReg$(_c, \"GameProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","jsxDEV","_jsxDEV","initialState","player","name","maxHealth","currentHealth","attack","defense","critChance","critMultiplier","monster","battleLogs","playerAttacking","monsterAttacking","playerDamaged","monsterDamaged","gameSpeed","gameRunning","gameReducer","state","action","type","Math","max","payload","damage","id","Date","now","text","isCritical","slice","GameContext","useGame","_s","GameProvider","children","_s2","dispatch","calculateDamage","attacker","defender","baseDamage","randomFactor","random","floor","gameLoop","setInterval","setTimeout","monsterCritical","monsterDamage","clearInterval","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/mm-rpg-react/src/contexts/GameContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\r\n\r\n// 初始状态\r\nconst initialState = {\r\n    player: {\r\n        name: \"勇者\",\r\n        maxHealth: 100,\r\n        currentHealth: 100,\r\n        attack: 10,\r\n        defense: 5,\r\n        critChance: 0.3,\r\n        critMultiplier: 2\r\n    },\r\n    monster: {\r\n        name: \"恶魔\",\r\n        maxHealth: 80,\r\n        currentHealth: 80,\r\n        attack: 8,\r\n        defense: 3,\r\n        critChance: 0.2,\r\n        critMultiplier: 1.5\r\n    },\r\n    battleLogs: [],\r\n    playerAttacking: false,\r\n    monsterAttacking: false,\r\n    playerDamaged: false,\r\n    monsterDamaged: false,\r\n    gameSpeed: 2000, // 每回合间隔(毫秒)\r\n    gameRunning: true\r\n};\r\n\r\n// Reducer函数来处理状态更新\r\nfunction gameReducer(state, action) {\r\n    switch (action.type) {\r\n        case 'PLAYER_ATTACK':\r\n            return {\r\n                ...state,\r\n                playerAttacking: true\r\n            };\r\n        case 'PLAYER_ATTACK_END':\r\n            return {\r\n                ...state,\r\n                playerAttacking: false\r\n            };\r\n        case 'MONSTER_DAMAGE':\r\n            return {\r\n                ...state,\r\n                monsterDamaged: true,\r\n                monster: {\r\n                    ...state.monster,\r\n                    currentHealth: Math.max(0, state.monster.currentHealth - action.payload.damage)\r\n                },\r\n                battleLogs: [\r\n                    {\r\n                        id: Date.now(),\r\n                        text: action.payload.isCritical\r\n                            ? `暴击！${state.player.name}对${state.monster.name}造成了${action.payload.damage}点伤害！`\r\n                            : `${state.player.name}对${state.monster.name}造成了${action.payload.damage}点伤害。`,\r\n                        isCritical: action.payload.isCritical\r\n                    },\r\n                    ...state.battleLogs.slice(0, 19) // 保留最新的20条日志\r\n                ]\r\n            };\r\n        case 'MONSTER_DAMAGE_END':\r\n            return {\r\n                ...state,\r\n                monsterDamaged: false\r\n            };\r\n        case 'MONSTER_ATTACK':\r\n            return {\r\n                ...state,\r\n                monsterAttacking: true\r\n            };\r\n        case 'MONSTER_ATTACK_END':\r\n            return {\r\n                ...state,\r\n                monsterAttacking: false\r\n            };\r\n        case 'PLAYER_DAMAGE':\r\n            return {\r\n                ...state,\r\n                playerDamaged: true,\r\n                player: {\r\n                    ...state.player,\r\n                    currentHealth: Math.max(0, state.player.currentHealth - action.payload.damage)\r\n                },\r\n                battleLogs: [\r\n                    {\r\n                        id: Date.now(),\r\n                        text: action.payload.isCritical\r\n                            ? `暴击！${state.monster.name}对${state.player.name}造成了${action.payload.damage}点伤害！`\r\n                            : `${state.monster.name}对${state.player.name}造成了${action.payload.damage}点伤害。`,\r\n                        isCritical: action.payload.isCritical\r\n                    },\r\n                    ...state.battleLogs.slice(0, 19)\r\n                ]\r\n            };\r\n        case 'PLAYER_DAMAGE_END':\r\n            return {\r\n                ...state,\r\n                playerDamaged: false\r\n            };\r\n        case 'ADD_LOG':\r\n            return {\r\n                ...state,\r\n                battleLogs: [\r\n                    { id: Date.now(), text: action.payload.text, isCritical: action.payload.isCritical },\r\n                    ...state.battleLogs.slice(0, 19)\r\n                ]\r\n            };\r\n        case 'RESET_MONSTER':\r\n            return {\r\n                ...state,\r\n                monster: {\r\n                    ...state.monster,\r\n                    currentHealth: state.monster.maxHealth\r\n                },\r\n                battleLogs: [\r\n                    { id: Date.now(), text: \"新的怪物出现了！\", isCritical: false },\r\n                    ...state.battleLogs\r\n                ]\r\n            };\r\n        case 'RESET_PLAYER':\r\n            return {\r\n                ...state,\r\n                player: {\r\n                    ...state.player,\r\n                    currentHealth: state.player.maxHealth\r\n                },\r\n                battleLogs: [\r\n                    { id: Date.now(), text: `${state.player.name}恢复了！`, isCritical: false },\r\n                    ...state.battleLogs\r\n                ]\r\n            };\r\n        case 'TOGGLE_GAME':\r\n            return {\r\n                ...state,\r\n                gameRunning: !state.gameRunning\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// 创建Context\r\nconst GameContext = createContext();\r\n\r\n// 自定义钩子，方便组件使用Context\r\nexport function useGame() {\r\n    return useContext(GameContext);\r\n}\r\n\r\n// Provider组件\r\nexport function GameProvider({ children }) {\r\n    const [state, dispatch] = useReducer(gameReducer, initialState);\r\n\r\n    // 战斗伤害计算\r\n    const calculateDamage = (attacker, defender) => {\r\n        let baseDamage = attacker.attack - defender.defense / 2;\r\n        baseDamage = Math.max(1, baseDamage); // 确保至少1点伤害\r\n\r\n        // 随机波动 (±20%)\r\n        const randomFactor = 0.8 + Math.random() * 0.4;\r\n        return Math.floor(baseDamage * randomFactor);\r\n    };\r\n\r\n    // 游戏主循环\r\n    useEffect(() => {\r\n        if (!state.gameRunning) return;\r\n\r\n        const gameLoop = setInterval(() => {\r\n            // 检查战斗是否可以继续\r\n            if (state.monster.currentHealth <= 0) {\r\n                dispatch({ type: 'ADD_LOG', payload: { text: `战斗胜利！${state.player.name}击败了${state.monster.name}！`, isCritical: true } });\r\n                setTimeout(() => dispatch({ type: 'RESET_MONSTER' }), 2000);\r\n                return;\r\n            }\r\n\r\n            if (state.player.currentHealth <= 0) {\r\n                dispatch({ type: 'ADD_LOG', payload: { text: `战斗失败！${state.player.name}被${state.monster.name}击败了！`, isCritical: true } });\r\n                setTimeout(() => dispatch({ type: 'RESET_PLAYER' }), 2000);\r\n                return;\r\n            }\r\n\r\n            // 玩家攻击\r\n            dispatch({ type: 'PLAYER_ATTACK' });\r\n\r\n            setTimeout(() => {\r\n                dispatch({ type: 'PLAYER_ATTACK_END' });\r\n\r\n                const isCritical = Math.random() < state.player.critChance;\r\n                let damage = calculateDamage(state.player, state.monster);\r\n\r\n                if (isCritical) {\r\n                    damage = Math.floor(damage * state.player.critMultiplier);\r\n                }\r\n\r\n                dispatch({\r\n                    type: 'MONSTER_DAMAGE',\r\n                    payload: { damage, isCritical }\r\n                });\r\n\r\n                setTimeout(() => {\r\n                    dispatch({ type: 'MONSTER_DAMAGE_END' });\r\n\r\n                    // 怪物攻击 (如果还活着)\r\n                    if (state.monster.currentHealth > 0) {\r\n                        setTimeout(() => {\r\n                            dispatch({ type: 'MONSTER_ATTACK' });\r\n\r\n                            setTimeout(() => {\r\n                                dispatch({ type: 'MONSTER_ATTACK_END' });\r\n\r\n                                const monsterCritical = Math.random() < state.monster.critChance;\r\n                                let monsterDamage = calculateDamage(state.monster, state.player);\r\n\r\n                                if (monsterCritical) {\r\n                                    monsterDamage = Math.floor(monsterDamage * state.monster.critMultiplier);\r\n                                }\r\n\r\n                                dispatch({\r\n                                    type: 'PLAYER_DAMAGE',\r\n                                    payload: { damage: monsterDamage, isCritical: monsterCritical }\r\n                                });\r\n\r\n                                setTimeout(() => {\r\n                                    dispatch({ type: 'PLAYER_DAMAGE_END' });\r\n                                }, 500);\r\n                            }, 500);\r\n                        }, 500);\r\n                    }\r\n                }, 500);\r\n            }, 500);\r\n\r\n        }, state.gameSpeed);\r\n\r\n        return () => clearInterval(gameLoop);\r\n    }, [state.gameRunning, state.player, state.monster]);\r\n\r\n    // 游戏初始化\r\n    useEffect(() => {\r\n        dispatch({ type: 'ADD_LOG', payload: { text: \"战斗开始！\", isCritical: false } });\r\n    }, []);\r\n\r\n    const value = {\r\n        state,\r\n        dispatch\r\n    };\r\n\r\n    return (\r\n        <GameContext.Provider value={value}>\r\n            {children}\r\n        </GameContext.Provider>\r\n    );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}